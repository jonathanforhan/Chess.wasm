{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2023, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nexport const WHITE = 'w';\nexport const BLACK = 'b';\nexport const PAWN = 'p';\nexport const KNIGHT = 'n';\nexport const BISHOP = 'b';\nexport const ROOK = 'r';\nexport const QUEEN = 'q';\nexport const KING = 'k';\nexport const DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\nconst EMPTY = -1;\nconst FLAGS = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q'\n};\n// prettier-ignore\nexport const SQUARES = ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', 'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', 'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', 'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', 'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', 'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', 'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', 'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'];\nconst BITS = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64\n};\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88 = {\n  a8: 0,\n  b8: 1,\n  c8: 2,\n  d8: 3,\n  e8: 4,\n  f8: 5,\n  g8: 6,\n  h8: 7,\n  a7: 16,\n  b7: 17,\n  c7: 18,\n  d7: 19,\n  e7: 20,\n  f7: 21,\n  g7: 22,\n  h7: 23,\n  a6: 32,\n  b6: 33,\n  c6: 34,\n  d6: 35,\n  e6: 36,\n  f6: 37,\n  g6: 38,\n  h6: 39,\n  a5: 48,\n  b5: 49,\n  c5: 50,\n  d5: 51,\n  e5: 52,\n  f5: 53,\n  g5: 54,\n  h5: 55,\n  a4: 64,\n  b4: 65,\n  c4: 66,\n  d4: 67,\n  e4: 68,\n  f4: 69,\n  g4: 70,\n  h4: 71,\n  a3: 80,\n  b3: 81,\n  c3: 82,\n  d3: 83,\n  e3: 84,\n  f3: 85,\n  g3: 86,\n  h3: 87,\n  a2: 96,\n  b2: 97,\n  c2: 98,\n  d2: 99,\n  e2: 100,\n  f2: 101,\n  g2: 102,\n  h2: 103,\n  a1: 112,\n  b1: 113,\n  c1: 114,\n  d1: 115,\n  e1: 116,\n  f1: 117,\n  g1: 118,\n  h1: 119\n};\nconst PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15]\n};\nconst PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1]\n};\n// prettier-ignore\nconst ATTACKS = [20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20];\n// prettier-ignore\nconst RAYS = [17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0, 0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0, -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17];\nconst PIECE_MASKS = {\n  p: 0x1,\n  n: 0x2,\n  b: 0x4,\n  r: 0x8,\n  q: 0x10,\n  k: 0x20\n};\nconst SYMBOLS = 'pnbrqkPNBRQK';\nconst PROMOTIONS = [KNIGHT, BISHOP, ROOK, QUEEN];\nconst RANK_1 = 7;\nconst RANK_2 = 6;\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1;\nconst RANK_8 = 0;\nconst ROOKS = {\n  w: [{\n    square: Ox88.a1,\n    flag: BITS.QSIDE_CASTLE\n  }, {\n    square: Ox88.h1,\n    flag: BITS.KSIDE_CASTLE\n  }],\n  b: [{\n    square: Ox88.a8,\n    flag: BITS.QSIDE_CASTLE\n  }, {\n    square: Ox88.h8,\n    flag: BITS.KSIDE_CASTLE\n  }]\n};\nconst SECOND_RANK = {\n  b: RANK_7,\n  w: RANK_2\n};\nconst TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*'];\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square) {\n  return square >> 4;\n}\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square) {\n  return square & 0xf;\n}\nfunction isDigit(c) {\n  return '0123456789'.indexOf(c) !== -1;\n}\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square) {\n  const f = file(square);\n  const r = rank(square);\n  return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1);\n}\nfunction swapColor(color) {\n  return color === WHITE ? BLACK : WHITE;\n}\nexport function validateFen(fen) {\n  // 1st criterion: 6 space-seperated fields?\n  const tokens = fen.split(/\\s+/);\n  if (tokens.length !== 6) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: must contain six space-delimited fields'\n    };\n  }\n  // 2nd criterion: move number field is a integer value > 0?\n  const moveNumber = parseInt(tokens[5], 10);\n  if (isNaN(moveNumber) || moveNumber <= 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: move number must be a positive integer'\n    };\n  }\n  // 3rd criterion: half move counter is an integer >= 0?\n  const halfMoves = parseInt(tokens[4], 10);\n  if (isNaN(halfMoves) || halfMoves < 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: half move counter number must be a non-negative integer'\n    };\n  }\n  // 4th criterion: 4th field is a valid e.p.-string?\n  if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: en-passant square is invalid'\n    };\n  }\n  // 5th criterion: 3th field is a valid castle-string?\n  if (/[^kKqQ-]/.test(tokens[2])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: castling availability is invalid'\n    };\n  }\n  // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n  if (!/^(w|b)$/.test(tokens[1])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: side-to-move is invalid'\n    };\n  }\n  // 7th criterion: 1st field contains 8 rows?\n  const rows = tokens[0].split('/');\n  if (rows.length !== 8) {\n    return {\n      ok: false,\n      error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\"\n    };\n  }\n  // 8th criterion: every row is valid?\n  for (let i = 0; i < rows.length; i++) {\n    // check for right sum of fields AND not two numbers in succession\n    let sumFields = 0;\n    let previousWasNumber = false;\n    for (let k = 0; k < rows[i].length; k++) {\n      if (isDigit(rows[i][k])) {\n        if (previousWasNumber) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (consecutive number)'\n          };\n        }\n        sumFields += parseInt(rows[i][k], 10);\n        previousWasNumber = true;\n      } else {\n        if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (invalid piece)'\n          };\n        }\n        sumFields += 1;\n        previousWasNumber = false;\n      }\n    }\n    if (sumFields !== 8) {\n      return {\n        ok: false,\n        error: 'Invalid FEN: piece data is invalid (too many squares in rank)'\n      };\n    }\n  }\n  if (tokens[3][1] == '3' && tokens[1] == 'w' || tokens[3][1] == '6' && tokens[1] == 'b') {\n    return {\n      ok: false,\n      error: 'Invalid FEN: illegal en-passant square'\n    };\n  }\n  const kings = [{\n    color: 'white',\n    regex: /K/g\n  }, {\n    color: 'black',\n    regex: /k/g\n  }];\n  for (const {\n    color,\n    regex\n  } of kings) {\n    if (!regex.test(tokens[0])) {\n      return {\n        ok: false,\n        error: `Invalid FEN: missing ${color} king`\n      };\n    }\n    if ((tokens[0].match(regex) || []).length > 1) {\n      return {\n        ok: false,\n        error: `Invalid FEN: too many ${color} kings`\n      };\n    }\n  }\n  return {\n    ok: true\n  };\n}\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move, moves) {\n  const from = move.from;\n  const to = move.to;\n  const piece = move.piece;\n  let ambiguities = 0;\n  let sameRank = 0;\n  let sameFile = 0;\n  for (let i = 0, len = moves.length; i < len; i++) {\n    const ambigFrom = moves[i].from;\n    const ambigTo = moves[i].to;\n    const ambigPiece = moves[i].piece;\n    /*\n     * if a move of the same piece type ends on the same to square, we'll need\n     * to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n      ambiguities++;\n      if (rank(from) === rank(ambigFrom)) {\n        sameRank++;\n      }\n      if (file(from) === file(ambigFrom)) {\n        sameFile++;\n      }\n    }\n  }\n  if (ambiguities > 0) {\n    if (sameRank > 0 && sameFile > 0) {\n      /*\n       * if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      return algebraic(from);\n    } else if (sameFile > 0) {\n      /*\n       * if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1);\n    } else {\n      // else use the file symbol\n      return algebraic(from).charAt(0);\n    }\n  }\n  return '';\n}\nfunction addMove(moves, color, from, to, piece) {\n  let captured = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;\n  let flags = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : BITS.NORMAL;\n  const r = rank(to);\n  if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n    for (let i = 0; i < PROMOTIONS.length; i++) {\n      const promotion = PROMOTIONS[i];\n      moves.push({\n        color,\n        from,\n        to,\n        piece,\n        captured,\n        promotion,\n        flags: flags | BITS.PROMOTION\n      });\n    }\n  } else {\n    moves.push({\n      color,\n      from,\n      to,\n      piece,\n      captured,\n      flags\n    });\n  }\n}\nfunction inferPieceType(san) {\n  let pieceType = san.charAt(0);\n  if (pieceType >= 'a' && pieceType <= 'h') {\n    const matches = san.match(/[a-h]\\d.*[a-h]\\d/);\n    if (matches) {\n      return undefined;\n    }\n    return PAWN;\n  }\n  pieceType = pieceType.toLowerCase();\n  if (pieceType === 'o') {\n    return KING;\n  }\n  return pieceType;\n}\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move) {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n}\nexport class Chess {\n  constructor() {\n    let fen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_POSITION;\n    this._board = new Array(128);\n    this._turn = WHITE;\n    this._header = {};\n    this._kings = {\n      w: EMPTY,\n      b: EMPTY\n    };\n    this._epSquare = -1;\n    this._halfMoves = 0;\n    this._moveNumber = 0;\n    this._history = [];\n    this._comments = {};\n    this._castling = {\n      w: 0,\n      b: 0\n    };\n    this.load(fen);\n  }\n  clear() {\n    let keepHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this._board = new Array(128);\n    this._kings = {\n      w: EMPTY,\n      b: EMPTY\n    };\n    this._turn = WHITE;\n    this._castling = {\n      w: 0,\n      b: 0\n    };\n    this._epSquare = EMPTY;\n    this._halfMoves = 0;\n    this._moveNumber = 1;\n    this._history = [];\n    this._comments = {};\n    this._header = keepHeaders ? this._header : {};\n    this._updateSetup(this.fen());\n  }\n  load(fen) {\n    let keepHeaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let tokens = fen.split(/\\s+/);\n    // append commonly omitted fen tokens\n    if (tokens.length >= 2 && tokens.length < 6) {\n      const adjustments = ['-', '-', '0', '1'];\n      fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ');\n    }\n    tokens = fen.split(/\\s+/);\n    const {\n      ok,\n      error\n    } = validateFen(fen);\n    if (!ok) {\n      throw new Error(error);\n    }\n    const position = tokens[0];\n    let square = 0;\n    this.clear(keepHeaders);\n    for (let i = 0; i < position.length; i++) {\n      const piece = position.charAt(i);\n      if (piece === '/') {\n        square += 8;\n      } else if (isDigit(piece)) {\n        square += parseInt(piece, 10);\n      } else {\n        const color = piece < 'a' ? WHITE : BLACK;\n        this.put({\n          type: piece.toLowerCase(),\n          color\n        }, algebraic(square));\n        square++;\n      }\n    }\n    this._turn = tokens[1];\n    if (tokens[2].indexOf('K') > -1) {\n      this._castling.w |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      this._castling.w |= BITS.QSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      this._castling.b |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      this._castling.b |= BITS.QSIDE_CASTLE;\n    }\n    this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3]];\n    this._halfMoves = parseInt(tokens[4], 10);\n    this._moveNumber = parseInt(tokens[5], 10);\n    this._updateSetup(this.fen());\n  }\n  fen() {\n    var _a, _b;\n    let empty = 0;\n    let fen = '';\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i]) {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        const {\n          color,\n          type: piece\n        } = this._board[i];\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n      } else {\n        empty++;\n      }\n      if (i + 1 & 0x88) {\n        if (empty > 0) {\n          fen += empty;\n        }\n        if (i !== Ox88.h1) {\n          fen += '/';\n        }\n        empty = 0;\n        i += 8;\n      }\n    }\n    let castling = '';\n    if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n      castling += 'K';\n    }\n    if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n      castling += 'Q';\n    }\n    if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n      castling += 'k';\n    }\n    if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n      castling += 'q';\n    }\n    // do we have an empty castling flag?\n    castling = castling || '-';\n    let epSquare = '-';\n    /*\n     * only print the ep square if en passant is a valid move (pawn is present\n     * and ep capture is not pinned)\n     */\n    if (this._epSquare !== EMPTY) {\n      const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n      const squares = [bigPawnSquare + 1, bigPawnSquare - 1];\n      for (const square of squares) {\n        // is the square off the board?\n        if (square & 0x88) {\n          continue;\n        }\n        const color = this._turn;\n        // is there a pawn that can capture the epSquare?\n        if (((_a = this._board[square]) === null || _a === void 0 ? void 0 : _a.color) === color && ((_b = this._board[square]) === null || _b === void 0 ? void 0 : _b.type) === PAWN) {\n          // if the pawn makes an ep capture, does it leave it's king in check?\n          this._makeMove({\n            color,\n            from: square,\n            to: this._epSquare,\n            piece: PAWN,\n            captured: PAWN,\n            flags: BITS.EP_CAPTURE\n          });\n          const isLegal = !this._isKingAttacked(color);\n          this._undoMove();\n          // if ep is legal, break and set the ep square in the FEN output\n          if (isLegal) {\n            epSquare = algebraic(this._epSquare);\n            break;\n          }\n        }\n      }\n    }\n    return [fen, this._turn, castling, epSquare, this._halfMoves, this._moveNumber].join(' ');\n  }\n  /*\n   * Called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object. If the FEN\n   * is equal to the default position, the SetUp and FEN are deleted the setup\n   * is only updated if history.length is zero, ie moves haven't been made.\n   */\n  _updateSetup(fen) {\n    if (this._history.length > 0) return;\n    if (fen !== DEFAULT_POSITION) {\n      this._header['SetUp'] = '1';\n      this._header['FEN'] = fen;\n    } else {\n      delete this._header['SetUp'];\n      delete this._header['FEN'];\n    }\n  }\n  reset() {\n    this.load(DEFAULT_POSITION);\n  }\n  get(square) {\n    return this._board[Ox88[square]] || false;\n  }\n  put(_ref, square) {\n    let {\n      type,\n      color\n    } = _ref;\n    // check for piece\n    if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n      return false;\n    }\n    // check for valid square\n    if (!(square in Ox88)) {\n      return false;\n    }\n    const sq = Ox88[square];\n    // don't let the user place more than one king\n    if (type == KING && !(this._kings[color] == EMPTY || this._kings[color] == sq)) {\n      return false;\n    }\n    this._board[sq] = {\n      type: type,\n      color: color\n    };\n    if (type === KING) {\n      this._kings[color] = sq;\n    }\n    this._updateSetup(this.fen());\n    return true;\n  }\n  remove(square) {\n    const piece = this.get(square);\n    delete this._board[Ox88[square]];\n    if (piece && piece.type === KING) {\n      this._kings[piece.color] = EMPTY;\n    }\n    this._updateSetup(this.fen());\n    return piece;\n  }\n  _attacked(color, square) {\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      // if empty square or wrong color\n      if (this._board[i] === undefined || this._board[i].color !== color) {\n        continue;\n      }\n      const piece = this._board[i];\n      const difference = i - square;\n      // skip - to/from square are the same\n      if (difference === 0) {\n        continue;\n      }\n      const index = difference + 119;\n      if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true;\n          } else {\n            if (piece.color === BLACK) return true;\n          }\n          continue;\n        }\n        // if the piece is a knight or a king\n        if (piece.type === 'n' || piece.type === 'k') return true;\n        const offset = RAYS[index];\n        let j = i + offset;\n        let blocked = false;\n        while (j !== square) {\n          if (this._board[j] != null) {\n            blocked = true;\n            break;\n          }\n          j += offset;\n        }\n        if (!blocked) return true;\n      }\n    }\n    return false;\n  }\n  _isKingAttacked(color) {\n    return this._attacked(swapColor(color), this._kings[color]);\n  }\n  isAttacked(square, attackedBy) {\n    return this._attacked(attackedBy, Ox88[square]);\n  }\n  isCheck() {\n    return this._isKingAttacked(this._turn);\n  }\n  inCheck() {\n    return this.isCheck();\n  }\n  isCheckmate() {\n    return this.isCheck() && this._moves().length === 0;\n  }\n  isStalemate() {\n    return !this.isCheck() && this._moves().length === 0;\n  }\n  isInsufficientMaterial() {\n    /*\n     * k.b. vs k.b. (of opposite colors) with mate in 1:\n     * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n     *\n     * k.b. vs k.n. with mate in 1:\n     * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n     */\n    const pieces = {\n      b: 0,\n      n: 0,\n      r: 0,\n      q: 0,\n      k: 0,\n      p: 0\n    };\n    const bishops = [];\n    let numPieces = 0;\n    let squareColor = 0;\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      squareColor = (squareColor + 1) % 2;\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      const piece = this._board[i];\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n        if (piece.type === BISHOP) {\n          bishops.push(squareColor);\n        }\n        numPieces++;\n      }\n    }\n    // k vs. k\n    if (numPieces === 2) {\n      return true;\n    } else if (\n    // k vs. kn .... or .... k vs. kb\n    numPieces === 3 && (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n      return true;\n    } else if (numPieces === pieces[BISHOP] + 2) {\n      // kb vs. kb where any number of bishops are all on the same color\n      let sum = 0;\n      const len = bishops.length;\n      for (let i = 0; i < len; i++) {\n        sum += bishops[i];\n      }\n      if (sum === 0 || sum === len) {\n        return true;\n      }\n    }\n    return false;\n  }\n  isThreefoldRepetition() {\n    const moves = [];\n    const positions = {};\n    let repetition = false;\n    while (true) {\n      const move = this._undoMove();\n      if (!move) break;\n      moves.push(move);\n    }\n    while (true) {\n      /*\n       * remove the last two fields in the FEN string, they're not needed when\n       * checking for draw by rep\n       */\n      const fen = this.fen().split(' ').slice(0, 4).join(' ');\n      // has the position occurred three or move times\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1;\n      if (positions[fen] >= 3) {\n        repetition = true;\n      }\n      const move = moves.pop();\n      if (!move) {\n        break;\n      } else {\n        this._makeMove(move);\n      }\n    }\n    return repetition;\n  }\n  isDraw() {\n    return this._halfMoves >= 100 ||\n    // 50 moves per side = 100 half moves\n    this.isStalemate() || this.isInsufficientMaterial() || this.isThreefoldRepetition();\n  }\n  isGameOver() {\n    return this.isCheckmate() || this.isStalemate() || this.isDraw();\n  }\n  moves() {\n    let {\n      verbose = false,\n      square = undefined\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const moves = this._moves({\n      square\n    });\n    if (verbose) {\n      return moves.map(move => this._makePretty(move));\n    } else {\n      return moves.map(move => this._moveToSan(move, moves));\n    }\n  }\n  _moves() {\n    let {\n      legal = true,\n      piece = undefined,\n      square = undefined\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a;\n    const forSquare = square ? square.toLowerCase() : undefined;\n    const forPiece = piece === null || piece === void 0 ? void 0 : piece.toLowerCase();\n    const moves = [];\n    const us = this._turn;\n    const them = swapColor(us);\n    let firstSquare = Ox88.a8;\n    let lastSquare = Ox88.h1;\n    let singleSquare = false;\n    // are we generating moves for a single square?\n    if (forSquare) {\n      // illegal square, return empty moves\n      if (!(forSquare in Ox88)) {\n        return [];\n      } else {\n        firstSquare = lastSquare = Ox88[forSquare];\n        singleSquare = true;\n      }\n    }\n    for (let from = firstSquare; from <= lastSquare; from++) {\n      // did we run off the end of the board\n      if (from & 0x88) {\n        from += 7;\n        continue;\n      }\n      // empty square or opponent, skip\n      if (!this._board[from] || this._board[from].color === them) {\n        continue;\n      }\n      const {\n        type\n      } = this._board[from];\n      let to;\n      if (type === PAWN) {\n        if (forPiece && forPiece !== type) continue;\n        // single square, non-capturing\n        to = from + PAWN_OFFSETS[us][0];\n        if (!this._board[to]) {\n          addMove(moves, us, from, to, PAWN);\n          // double square\n          to = from + PAWN_OFFSETS[us][1];\n          if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n            addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN);\n          }\n        }\n        // pawn captures\n        for (let j = 2; j < 4; j++) {\n          to = from + PAWN_OFFSETS[us][j];\n          if (to & 0x88) continue;\n          if (((_a = this._board[to]) === null || _a === void 0 ? void 0 : _a.color) === them) {\n            addMove(moves, us, from, to, PAWN, this._board[to].type, BITS.CAPTURE);\n          } else if (to === this._epSquare) {\n            addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE);\n          }\n        }\n      } else {\n        if (forPiece && forPiece !== type) continue;\n        for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n          const offset = PIECE_OFFSETS[type][j];\n          to = from;\n          while (true) {\n            to += offset;\n            if (to & 0x88) break;\n            if (!this._board[to]) {\n              addMove(moves, us, from, to, type);\n            } else {\n              // own color, stop loop\n              if (this._board[to].color === us) break;\n              addMove(moves, us, from, to, type, this._board[to].type, BITS.CAPTURE);\n              break;\n            }\n            /* break, if knight or king */\n            if (type === KNIGHT || type === KING) break;\n          }\n        }\n      }\n    }\n    /*\n     * check for castling if we're:\n     *   a) generating all moves, or\n     *   b) doing single square move generation on the king's square\n     */\n    if (forPiece === undefined || forPiece === KING) {\n      if (!singleSquare || lastSquare === this._kings[us]) {\n        // king-side castling\n        if (this._castling[us] & BITS.KSIDE_CASTLE) {\n          const castlingFrom = this._kings[us];\n          const castlingTo = castlingFrom + 2;\n          if (!this._board[castlingFrom + 1] && !this._board[castlingTo] && !this._attacked(them, this._kings[us]) && !this._attacked(them, castlingFrom + 1) && !this._attacked(them, castlingTo)) {\n            addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.KSIDE_CASTLE);\n          }\n        }\n        // queen-side castling\n        if (this._castling[us] & BITS.QSIDE_CASTLE) {\n          const castlingFrom = this._kings[us];\n          const castlingTo = castlingFrom - 2;\n          if (!this._board[castlingFrom - 1] && !this._board[castlingFrom - 2] && !this._board[castlingFrom - 3] && !this._attacked(them, this._kings[us]) && !this._attacked(them, castlingFrom - 1) && !this._attacked(them, castlingTo)) {\n            addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.QSIDE_CASTLE);\n          }\n        }\n      }\n    }\n    /*\n     * return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves;\n    }\n    // filter out illegal moves\n    const legalMoves = [];\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i]);\n      if (!this._isKingAttacked(us)) {\n        legalMoves.push(moves[i]);\n      }\n      this._undoMove();\n    }\n    return legalMoves;\n  }\n  move(move) {\n    let {\n      strict = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    /*\n     * The move function can be called with in the following parameters:\n     *\n     * .move('Nxb7')       <- argument is a case-sensitive SAN string\n     *\n     * .move({ from: 'h7', <- argument is a move object\n     *         to :'h8',\n     *         promotion: 'q' })\n     *\n     *\n     * An optional strict argument may be supplied to tell chess.js to\n     * strictly follow the SAN specification.\n     */\n    let moveObj = null;\n    if (typeof move === 'string') {\n      moveObj = this._moveFromSan(move, strict);\n    } else if (typeof move === 'object') {\n      const moves = this._moves();\n      // convert the pretty move object to an ugly move object\n      for (let i = 0, len = moves.length; i < len; i++) {\n        if (move.from === algebraic(moves[i].from) && move.to === algebraic(moves[i].to) && (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)) {\n          moveObj = moves[i];\n          break;\n        }\n      }\n    }\n    // failed to find move\n    if (!moveObj) {\n      if (typeof move === 'string') {\n        throw new Error(`Invalid move: ${move}`);\n      } else {\n        throw new Error(`Invalid move: ${JSON.stringify(move)}`);\n      }\n    }\n    /*\n     * need to make a copy of move because we can't generate SAN after the move\n     * is made\n     */\n    const prettyMove = this._makePretty(moveObj);\n    this._makeMove(moveObj);\n    return prettyMove;\n  }\n  _push(move) {\n    this._history.push({\n      move,\n      kings: {\n        b: this._kings.b,\n        w: this._kings.w\n      },\n      turn: this._turn,\n      castling: {\n        b: this._castling.b,\n        w: this._castling.w\n      },\n      epSquare: this._epSquare,\n      halfMoves: this._halfMoves,\n      moveNumber: this._moveNumber\n    });\n  }\n  _makeMove(move) {\n    const us = this._turn;\n    const them = swapColor(us);\n    this._push(move);\n    this._board[move.to] = this._board[move.from];\n    delete this._board[move.from];\n    // if ep capture, remove the captured pawn\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (this._turn === BLACK) {\n        delete this._board[move.to - 16];\n      } else {\n        delete this._board[move.to + 16];\n      }\n    }\n    // if pawn promotion, replace with new piece\n    if (move.promotion) {\n      this._board[move.to] = {\n        type: move.promotion,\n        color: us\n      };\n    }\n    // if we moved the king\n    if (this._board[move.to].type === KING) {\n      this._kings[us] = move.to;\n      // if we castled, move the rook next to the king\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        const castlingTo = move.to - 1;\n        const castlingFrom = move.to + 1;\n        this._board[castlingTo] = this._board[castlingFrom];\n        delete this._board[castlingFrom];\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        const castlingTo = move.to + 1;\n        const castlingFrom = move.to - 2;\n        this._board[castlingTo] = this._board[castlingFrom];\n        delete this._board[castlingFrom];\n      }\n      // turn off castling\n      this._castling[us] = 0;\n    }\n    // turn off castling if we move a rook\n    if (this._castling[us]) {\n      for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (move.from === ROOKS[us][i].square && this._castling[us] & ROOKS[us][i].flag) {\n          this._castling[us] ^= ROOKS[us][i].flag;\n          break;\n        }\n      }\n    }\n    // turn off castling if we capture a rook\n    if (this._castling[them]) {\n      for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (move.to === ROOKS[them][i].square && this._castling[them] & ROOKS[them][i].flag) {\n          this._castling[them] ^= ROOKS[them][i].flag;\n          break;\n        }\n      }\n    }\n    // if big pawn move, update the en passant square\n    if (move.flags & BITS.BIG_PAWN) {\n      if (us === BLACK) {\n        this._epSquare = move.to - 16;\n      } else {\n        this._epSquare = move.to + 16;\n      }\n    } else {\n      this._epSquare = EMPTY;\n    }\n    // reset the 50 move counter if a pawn is moved or a piece is captured\n    if (move.piece === PAWN) {\n      this._halfMoves = 0;\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      this._halfMoves = 0;\n    } else {\n      this._halfMoves++;\n    }\n    if (us === BLACK) {\n      this._moveNumber++;\n    }\n    this._turn = them;\n  }\n  undo() {\n    const move = this._undoMove();\n    return move ? this._makePretty(move) : null;\n  }\n  _undoMove() {\n    const old = this._history.pop();\n    if (old === undefined) {\n      return null;\n    }\n    const move = old.move;\n    this._kings = old.kings;\n    this._turn = old.turn;\n    this._castling = old.castling;\n    this._epSquare = old.epSquare;\n    this._halfMoves = old.halfMoves;\n    this._moveNumber = old.moveNumber;\n    const us = this._turn;\n    const them = swapColor(us);\n    this._board[move.from] = this._board[move.to];\n    this._board[move.from].type = move.piece; // to undo any promotions\n    delete this._board[move.to];\n    if (move.captured) {\n      if (move.flags & BITS.EP_CAPTURE) {\n        // en passant capture\n        let index;\n        if (us === BLACK) {\n          index = move.to - 16;\n        } else {\n          index = move.to + 16;\n        }\n        this._board[index] = {\n          type: PAWN,\n          color: them\n        };\n      } else {\n        // regular capture\n        this._board[move.to] = {\n          type: move.captured,\n          color: them\n        };\n      }\n    }\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      let castlingTo, castlingFrom;\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castlingTo = move.to + 1;\n        castlingFrom = move.to - 1;\n      } else {\n        castlingTo = move.to - 2;\n        castlingFrom = move.to + 1;\n      }\n      this._board[castlingTo] = this._board[castlingFrom];\n      delete this._board[castlingFrom];\n    }\n    return move;\n  }\n  pgn() {\n    let {\n      newline = '\\n',\n      maxWidth = 0\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    /*\n     * using the specification from http://www.chessclub.com/help/PGN-spec\n     * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n     */\n    const result = [];\n    let headerExists = false;\n    /* add the PGN header information */\n    for (const i in this._header) {\n      /*\n       * TODO: order of enumerated properties in header object is not\n       * guaranteed, see ECMA-262 spec (section 12.6.4)\n       */\n      result.push('[' + i + ' \"' + this._header[i] + '\"]' + newline);\n      headerExists = true;\n    }\n    if (headerExists && this._history.length) {\n      result.push(newline);\n    }\n    const appendComment = moveString => {\n      const comment = this._comments[this.fen()];\n      if (typeof comment !== 'undefined') {\n        const delimiter = moveString.length > 0 ? ' ' : '';\n        moveString = `${moveString}${delimiter}{${comment}}`;\n      }\n      return moveString;\n    };\n    // pop all of history onto reversed_history\n    const reversedHistory = [];\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove());\n    }\n    const moves = [];\n    let moveString = '';\n    // special case of a commented starting position with no moves\n    if (reversedHistory.length === 0) {\n      moves.push(appendComment(''));\n    }\n    // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n    while (reversedHistory.length > 0) {\n      moveString = appendComment(moveString);\n      const move = reversedHistory.pop();\n      // make TypeScript stop complaining about move being undefined\n      if (!move) {\n        break;\n      }\n      // if the position started with black to move, start PGN with #. ...\n      if (!this._history.length && move.color === 'b') {\n        const prefix = `${this._moveNumber}. ...`;\n        // is there a comment preceding the first move?\n        moveString = moveString ? `${moveString} ${prefix}` : prefix;\n      } else if (move.color === 'w') {\n        // store the previous generated move_string if we have one\n        if (moveString.length) {\n          moves.push(moveString);\n        }\n        moveString = this._moveNumber + '.';\n      }\n      moveString = moveString + ' ' + this._moveToSan(move, this._moves({\n        legal: true\n      }));\n      this._makeMove(move);\n    }\n    // are there any other leftover moves?\n    if (moveString.length) {\n      moves.push(appendComment(moveString));\n    }\n    // is there a result?\n    if (typeof this._header.Result !== 'undefined') {\n      moves.push(this._header.Result);\n    }\n    /*\n     * history should be back to what it was before we started generating PGN,\n     * so join together moves\n     */\n    if (maxWidth === 0) {\n      return result.join('') + moves.join(' ');\n    }\n    // TODO (jah): huh?\n    const strip = function () {\n      if (result.length > 0 && result[result.length - 1] === ' ') {\n        result.pop();\n        return true;\n      }\n      return false;\n    };\n    // NB: this does not preserve comment whitespace.\n    const wrapComment = function (width, move) {\n      for (const token of move.split(' ')) {\n        if (!token) {\n          continue;\n        }\n        if (width + token.length > maxWidth) {\n          while (strip()) {\n            width--;\n          }\n          result.push(newline);\n          width = 0;\n        }\n        result.push(token);\n        width += token.length;\n        result.push(' ');\n        width++;\n      }\n      if (strip()) {\n        width--;\n      }\n      return width;\n    };\n    // wrap the PGN output at max_width\n    let currentWidth = 0;\n    for (let i = 0; i < moves.length; i++) {\n      if (currentWidth + moves[i].length > maxWidth) {\n        if (moves[i].includes('{')) {\n          currentWidth = wrapComment(currentWidth, moves[i]);\n          continue;\n        }\n      }\n      // if the current move will push past max_width\n      if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n        // don't end the line with whitespace\n        if (result[result.length - 1] === ' ') {\n          result.pop();\n        }\n        result.push(newline);\n        currentWidth = 0;\n      } else if (i !== 0) {\n        result.push(' ');\n        currentWidth++;\n      }\n      result.push(moves[i]);\n      currentWidth += moves[i].length;\n    }\n    return result.join('');\n  }\n  header() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    for (let i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        this._header[args[i]] = args[i + 1];\n      }\n    }\n    return this._header;\n  }\n  loadPgn(pgn) {\n    let {\n      strict = false,\n      newlineChar = '\\r?\\n'\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    function mask(str) {\n      return str.replace(/\\\\/g, '\\\\');\n    }\n    function parsePgnHeader(header) {\n      const headerObj = {};\n      const headers = header.split(new RegExp(mask(newlineChar)));\n      let key = '';\n      let value = '';\n      for (let i = 0; i < headers.length; i++) {\n        const regex = /^\\s*\\[\\s*([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/;\n        key = headers[i].replace(regex, '$1');\n        value = headers[i].replace(regex, '$2');\n        if (key.trim().length > 0) {\n          headerObj[key] = value;\n        }\n      }\n      return headerObj;\n    }\n    // strip whitespace from head/tail of PGN block\n    pgn = pgn.trim();\n    /*\n     * RegExp to split header. Takes advantage of the fact that header and movetext\n     * will always have a blank line between them (ie, two newline_char's). Handles\n     * case where movetext is empty by matching newlineChar until end of string is\n     * matched - effectively trimming from the end extra newlineChar.\n     *\n     * With default newline_char, will equal:\n     * /^(\\[((?:\\r?\\n)|.)*\\])((?:\\s*\\r?\\n){2}|(?:\\s*\\r?\\n)*$)/\n     */\n    const headerRegex = new RegExp('^(\\\\[((?:' + mask(newlineChar) + ')|.)*\\\\])' + '((?:\\\\s*' + mask(newlineChar) + '){2}|(?:\\\\s*' + mask(newlineChar) + ')*$)');\n    // If no header given, begin with moves.\n    const headerRegexResults = headerRegex.exec(pgn);\n    const headerString = headerRegexResults ? headerRegexResults.length >= 2 ? headerRegexResults[1] : '' : '';\n    // Put the board in the starting position\n    this.reset();\n    // parse PGN header\n    const headers = parsePgnHeader(headerString);\n    let fen = '';\n    for (const key in headers) {\n      // check to see user is including fen (possibly with wrong tag case)\n      if (key.toLowerCase() === 'fen') {\n        fen = headers[key];\n      }\n      this.header(key, headers[key]);\n    }\n    /*\n     * the permissive parser should attempt to load a fen tag, even if it's the\n     * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n     */\n    if (!strict) {\n      if (fen) {\n        this.load(fen, true);\n      }\n    } else {\n      /*\n       * strict parser - load the starting position indicated by [Setup '1']\n       * and [FEN position]\n       */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers)) {\n          throw new Error('Invalid PGN: FEN tag must be supplied with SetUp tag');\n        }\n        // second argument to load: don't clear the headers\n        this.load(headers['FEN'], true);\n      }\n    }\n    /*\n     * NB: the regexes below that delete move numbers, recursive annotations,\n     * and numeric annotation glyphs may also match text in comments. To\n     * prevent this, we transform comments by hex-encoding them in place and\n     * decoding them again after the other tokens have been deleted.\n     *\n     * While the spec states that PGN files should be ASCII encoded, we use\n     * {en,de}codeURIComponent here to support arbitrary UTF8 as a convenience\n     * for modern users\n     */\n    function toHex(s) {\n      return Array.from(s).map(function (c) {\n        /*\n         * encodeURI doesn't transform most ASCII characters, so we handle\n         * these ourselves\n         */\n        return c.charCodeAt(0) < 128 ? c.charCodeAt(0).toString(16) : encodeURIComponent(c).replace(/%/g, '').toLowerCase();\n      }).join('');\n    }\n    function fromHex(s) {\n      return s.length == 0 ? '' : decodeURIComponent('%' + (s.match(/.{1,2}/g) || []).join('%'));\n    }\n    const encodeComment = function (s) {\n      s = s.replace(new RegExp(mask(newlineChar), 'g'), ' ');\n      return `{${toHex(s.slice(1, s.length - 1))}}`;\n    };\n    const decodeComment = function (s) {\n      if (s.startsWith('{') && s.endsWith('}')) {\n        return fromHex(s.slice(1, s.length - 1));\n      }\n    };\n    // delete header to get the moves\n    let ms = pgn.replace(headerString, '').replace(\n    // encode comments so they don't get deleted below\n    new RegExp(`({[^}]*})+?|;([^${mask(newlineChar)}]*)`, 'g'), function (_match, bracket, semicolon) {\n      return bracket !== undefined ? encodeComment(bracket) : ' ' + encodeComment(`{${semicolon.slice(1)}}`);\n    }).replace(new RegExp(mask(newlineChar), 'g'), ' ');\n    // delete recursive annotation variations\n    const ravRegex = /(\\([^()]+\\))+?/g;\n    while (ravRegex.test(ms)) {\n      ms = ms.replace(ravRegex, '');\n    }\n    // delete move numbers\n    ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n    // delete ... indicating black to move\n    ms = ms.replace(/\\.\\.\\./g, '');\n    /* delete numeric annotation glyphs */\n    ms = ms.replace(/\\$\\d+/g, '');\n    // trim and get array of moves\n    let moves = ms.trim().split(new RegExp(/\\s+/));\n    // delete empty entries\n    moves = moves.filter(move => move !== '');\n    let result = '';\n    for (let halfMove = 0; halfMove < moves.length; halfMove++) {\n      const comment = decodeComment(moves[halfMove]);\n      if (comment !== undefined) {\n        this._comments[this.fen()] = comment;\n        continue;\n      }\n      const move = this._moveFromSan(moves[halfMove], strict);\n      // invalid move\n      if (move == null) {\n        // was the move an end of game marker\n        if (TERMINATION_MARKERS.indexOf(moves[halfMove]) > -1) {\n          result = moves[halfMove];\n        } else {\n          throw new Error(`Invalid move in PGN: ${moves[halfMove]}`);\n        }\n      } else {\n        // reset the end of game marker if making a valid move\n        result = '';\n        this._makeMove(move);\n      }\n    }\n    /*\n     * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n     * the termination marker. Only do this when headers are present, but the\n     * result tag is missing\n     */\n    if (result && Object.keys(this._header).length && !this._header['Result']) {\n      this.header('Result', result);\n    }\n  }\n  /*\n   * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} strict Use the strict SAN parser. It will throw errors\n   * on overly disambiguated moves (see below):\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  _moveToSan(move, moves) {\n    let output = '';\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O';\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O';\n    } else {\n      if (move.piece !== PAWN) {\n        const disambiguator = getDisambiguator(move, moves);\n        output += move.piece.toUpperCase() + disambiguator;\n      }\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0];\n        }\n        output += 'x';\n      }\n      output += algebraic(move.to);\n      if (move.promotion) {\n        output += '=' + move.promotion.toUpperCase();\n      }\n    }\n    this._makeMove(move);\n    if (this.isCheck()) {\n      if (this.isCheckmate()) {\n        output += '#';\n      } else {\n        output += '+';\n      }\n    }\n    this._undoMove();\n    return output;\n  }\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  _moveFromSan(move) {\n    let strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    // strip off any move decorations: e.g Nf3+?! becomes Nf3\n    const cleanMove = strippedSan(move);\n    let pieceType = inferPieceType(cleanMove);\n    let moves = this._moves({\n      legal: true,\n      piece: pieceType\n    });\n    // strict parser\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n        return moves[i];\n      }\n    }\n    // the strict parser failed\n    if (strict) {\n      return null;\n    }\n    let piece = undefined;\n    let matches = undefined;\n    let from = undefined;\n    let to = undefined;\n    let promotion = undefined;\n    /*\n     * The default permissive (non-strict) parser allows the user to parse\n     * non-standard chess notations. This parser is only run after the strict\n     * Standard Algebraic Notation (SAN) parser has failed.\n     *\n     * When running the permissive parser, we'll run a regex to grab the piece, the\n     * to/from square, and an optional promotion piece. This regex will\n     * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n     * f7f8q, b1c3\n     *\n     * NOTE: Some positions and moves may be ambiguous when using the permissive\n     * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n     * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n     * move). In these cases, the permissive parser will default to the most\n     * basic interpretation (which is b1c3 parsing to Nc3).\n     */\n    let overlyDisambiguated = false;\n    matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\n    //     piece         from              to       promotion\n    );\n\n    if (matches) {\n      piece = matches[1];\n      from = matches[2];\n      to = matches[3];\n      promotion = matches[4];\n      if (from.length == 1) {\n        overlyDisambiguated = true;\n      }\n    } else {\n      /*\n       * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n       * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n       * there is one legal knight move to e7). In this case, the value of\n       * 'from' variable will be a rank or file, not a square.\n       */\n      matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/);\n      if (matches) {\n        piece = matches[1];\n        from = matches[2];\n        to = matches[3];\n        promotion = matches[4];\n        if (from.length == 1) {\n          overlyDisambiguated = true;\n        }\n      }\n    }\n    pieceType = inferPieceType(cleanMove);\n    moves = this._moves({\n      legal: true,\n      piece: piece ? piece : pieceType\n    });\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (from && to) {\n        // hand-compare move properties with the results from our permissive regex\n        if ((!piece || piece.toLowerCase() == moves[i].piece) && Ox88[from] == moves[i].from && Ox88[to] == moves[i].to && (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n          return moves[i];\n        } else if (overlyDisambiguated) {\n          /*\n           * SPECIAL CASE: we parsed a move string that may have an unneeded\n           * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n           */\n          const square = algebraic(moves[i].from);\n          if ((!piece || piece.toLowerCase() == moves[i].piece) && Ox88[to] == moves[i].to && (from == square[0] || from == square[1]) && (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n            return moves[i];\n          }\n        }\n      }\n    }\n    return null;\n  }\n  ascii() {\n    let s = '   +------------------------+\\n';\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // display the rank\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |';\n      }\n      if (this._board[i]) {\n        const piece = this._board[i].type;\n        const color = this._board[i].color;\n        const symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n        s += ' ' + symbol + ' ';\n      } else {\n        s += ' . ';\n      }\n      if (i + 1 & 0x88) {\n        s += '|\\n';\n        i += 8;\n      }\n    }\n    s += '   +------------------------+\\n';\n    s += '     a  b  c  d  e  f  g  h';\n    return s;\n  }\n  perft(depth) {\n    const moves = this._moves({\n      legal: false\n    });\n    let nodes = 0;\n    const color = this._turn;\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i]);\n      if (!this._isKingAttacked(color)) {\n        if (depth - 1 > 0) {\n          nodes += this.perft(depth - 1);\n        } else {\n          nodes++;\n        }\n      }\n      this._undoMove();\n    }\n    return nodes;\n  }\n  // pretty = external move object\n  _makePretty(uglyMove) {\n    const {\n      color,\n      piece,\n      from,\n      to,\n      flags,\n      captured,\n      promotion\n    } = uglyMove;\n    let prettyFlags = '';\n    for (const flag in BITS) {\n      if (BITS[flag] & flags) {\n        prettyFlags += FLAGS[flag];\n      }\n    }\n    const fromAlgebraic = algebraic(from);\n    const toAlgebraic = algebraic(to);\n    const move = {\n      color,\n      piece,\n      from: fromAlgebraic,\n      to: toAlgebraic,\n      san: this._moveToSan(uglyMove, this._moves({\n        legal: true\n      })),\n      flags: prettyFlags,\n      lan: fromAlgebraic + toAlgebraic\n    };\n    if (captured) {\n      move.captured = captured;\n    }\n    if (promotion) {\n      move.promotion = promotion;\n      move.lan += promotion;\n    }\n    return move;\n  }\n  turn() {\n    return this._turn;\n  }\n  board() {\n    const output = [];\n    let row = [];\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i] == null) {\n        row.push(null);\n      } else {\n        row.push({\n          square: algebraic(i),\n          type: this._board[i].type,\n          color: this._board[i].color\n        });\n      }\n      if (i + 1 & 0x88) {\n        output.push(row);\n        row = [];\n        i += 8;\n      }\n    }\n    return output;\n  }\n  squareColor(square) {\n    if (square in Ox88) {\n      const sq = Ox88[square];\n      return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark';\n    }\n    return null;\n  }\n  history() {\n    let {\n      verbose = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const reversedHistory = [];\n    const moveHistory = [];\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove());\n    }\n    while (true) {\n      const move = reversedHistory.pop();\n      if (!move) {\n        break;\n      }\n      if (verbose) {\n        moveHistory.push(Object.assign({\n          fen: this.fen()\n        }, this._makePretty(move)));\n      } else {\n        moveHistory.push(this._moveToSan(move, this._moves()));\n      }\n      this._makeMove(move);\n    }\n    return moveHistory;\n  }\n  _pruneComments() {\n    const reversedHistory = [];\n    const currentComments = {};\n    const copyComment = fen => {\n      if (fen in this._comments) {\n        currentComments[fen] = this._comments[fen];\n      }\n    };\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove());\n    }\n    copyComment(this.fen());\n    while (true) {\n      const move = reversedHistory.pop();\n      if (!move) {\n        break;\n      }\n      this._makeMove(move);\n      copyComment(this.fen());\n    }\n    this._comments = currentComments;\n  }\n  getComment() {\n    return this._comments[this.fen()];\n  }\n  setComment(comment) {\n    this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']');\n  }\n  deleteComment() {\n    const comment = this._comments[this.fen()];\n    delete this._comments[this.fen()];\n    return comment;\n  }\n  getComments() {\n    this._pruneComments();\n    return Object.keys(this._comments).map(fen => {\n      return {\n        fen: fen,\n        comment: this._comments[fen]\n      };\n    });\n  }\n  deleteComments() {\n    this._pruneComments();\n    return Object.keys(this._comments).map(fen => {\n      const comment = this._comments[fen];\n      delete this._comments[fen];\n      return {\n        fen: fen,\n        comment: comment\n      };\n    });\n  }\n}","map":{"version":3,"mappings":"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,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACjD,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAG,CAAC,EAAE,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EACjD,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,CAC/C;AAED;AACA,MAAMC,IAAI,GAAG,CACV,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAC5D,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAG,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,EAAE,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,E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","names":["WHITE","BLACK","PAWN","KNIGHT","BISHOP","ROOK","QUEEN","KING","DEFAULT_POSITION","EMPTY","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","SQUARES","BITS","Ox88","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","k","ATTACKS","RAYS","PIECE_MASKS","p","SYMBOLS","PROMOTIONS","RANK_1","RANK_2","RANK_7","RANK_8","ROOKS","square","flag","SECOND_RANK","TERMINATION_MARKERS","rank","file","isDigit","c","indexOf","algebraic","f","substring","swapColor","color","validateFen","fen","tokens","split","length","ok","error","moveNumber","parseInt","isNaN","halfMoves","test","rows","i","sumFields","previousWasNumber","kings","regex","match","getDisambiguator","move","moves","from","to","piece","ambiguities","sameRank","sameFile","len","ambigFrom","ambigTo","ambigPiece","charAt","addMove","captured","undefined","flags","promotion","push","inferPieceType","san","pieceType","matches","toLowerCase","strippedSan","replace","Chess","constructor","Array","load","clear","keepHeaders","_board","_kings","_turn","_castling","_epSquare","_halfMoves","_moveNumber","_history","_comments","_header","_updateSetup","adjustments","concat","slice","join","Error","position","put","type","empty","toUpperCase","castling","epSquare","bigPawnSquare","squares","_makeMove","isLegal","_isKingAttacked","_undoMove","reset","get","sq","remove","_attacked","difference","index","offset","j","blocked","isAttacked","attackedBy","isCheck","inCheck","isCheckmate","_moves","isStalemate","isInsufficientMaterial","pieces","bishops","numPieces","squareColor","sum","isThreefoldRepetition","positions","repetition","pop","isDraw","isGameOver","verbose","map","_makePretty","_moveToSan","legal","forSquare","forPiece","us","them","firstSquare","lastSquare","singleSquare","castlingFrom","castlingTo","legalMoves","strict","moveObj","_moveFromSan","JSON","stringify","prettyMove","_push","turn","undo","old","pgn","newline","maxWidth","result","headerExists","appendComment","moveString","comment","delimiter","reversedHistory","prefix","Result","strip","wrapComment","width","token","currentWidth","includes","header","args","loadPgn","newlineChar","mask","str","parsePgnHeader","headerObj","headers","RegExp","key","value","trim","headerRegex","headerRegexResults","exec","headerString","toHex","s","charCodeAt","toString","encodeURIComponent","fromHex","decodeURIComponent","encodeComment","decodeComment","startsWith","endsWith","ms","_match","bracket","semicolon","ravRegex","filter","halfMove","Object","keys","output","disambiguator","cleanMove","overlyDisambiguated","ascii","symbol","perft","depth","nodes","uglyMove","prettyFlags","fromAlgebraic","toAlgebraic","lan","board","row","history","moveHistory","_pruneComments","currentComments","copyComment","getComment","setComment","deleteComment","getComments","deleteComments"],"sources":["/home/jon/dev/chess-wasm/js/node_modules/chess.js/src/chess.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2023, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nexport const WHITE = 'w'\nexport const BLACK = 'b'\n\nexport const PAWN = 'p'\nexport const KNIGHT = 'n'\nexport const BISHOP = 'b'\nexport const ROOK = 'r'\nexport const QUEEN = 'q'\nexport const KING = 'k'\n\nexport type Color = 'w' | 'b'\nexport type PieceSymbol = 'p' | 'n' | 'b' | 'r' | 'q' | 'k'\n\n// prettier-ignore\nexport type Square =\n    'a8' | 'b8' | 'c8' | 'd8' | 'e8' | 'f8' | 'g8' | 'h8' |\n    'a7' | 'b7' | 'c7' | 'd7' | 'e7' | 'f7' | 'g7' | 'h7' |\n    'a6' | 'b6' | 'c6' | 'd6' | 'e6' | 'f6' | 'g6' | 'h6' |\n    'a5' | 'b5' | 'c5' | 'd5' | 'e5' | 'f5' | 'g5' | 'h5' |\n    'a4' | 'b4' | 'c4' | 'd4' | 'e4' | 'f4' | 'g4' | 'h4' |\n    'a3' | 'b3' | 'c3' | 'd3' | 'e3' | 'f3' | 'g3' | 'h3' |\n    'a2' | 'b2' | 'c2' | 'd2' | 'e2' | 'f2' | 'g2' | 'h2' |\n    'a1' | 'b1' | 'c1' | 'd1' | 'e1' | 'f1' | 'g1' | 'h1'\n\nexport const DEFAULT_POSITION =\n  'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n\nexport type Piece = {\n  color: Color\n  type: PieceSymbol\n}\n\ntype InternalMove = {\n  color: Color\n  from: number\n  to: number\n  piece: PieceSymbol\n  captured?: PieceSymbol\n  promotion?: PieceSymbol\n  flags: number\n}\n\ninterface History {\n  move: InternalMove\n  kings: Record<Color, number>\n  turn: Color\n  castling: Record<Color, number>\n  epSquare: number\n  halfMoves: number\n  moveNumber: number\n}\n\nexport type Move = {\n  color: Color\n  from: Square\n  to: Square\n  piece: PieceSymbol\n  captured?: PieceSymbol\n  promotion?: PieceSymbol\n  flags: string\n  san: string\n  lan: string\n}\n\nconst EMPTY = -1\n\nconst FLAGS: Record<string, string> = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q',\n}\n\n// prettier-ignore\nexport const SQUARES: Square[] = [\n  'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8',\n  'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7',\n  'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6',\n  'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',\n  'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4',\n  'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3',\n  'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2',\n  'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'\n]\n\nconst BITS: Record<string, number> = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64,\n}\n\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88: Record<Square, number> = {\n  a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n  a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n  a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n  a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n  a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n  a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n  a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n  a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n}\n\nconst PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15],\n}\n\nconst PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1],\n}\n\n// prettier-ignore\nconst ATTACKS = [\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n  24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n];\n\n// prettier-ignore\nconst RAYS = [\n   17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n    0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n    0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n    0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n    0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n    1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n    0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n    0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n    0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n    0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n  -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n];\n\nconst PIECE_MASKS = { p: 0x1, n: 0x2, b: 0x4, r: 0x8, q: 0x10, k: 0x20 }\n\nconst SYMBOLS = 'pnbrqkPNBRQK'\n\nconst PROMOTIONS: PieceSymbol[] = [KNIGHT, BISHOP, ROOK, QUEEN]\n\nconst RANK_1 = 7\nconst RANK_2 = 6\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1\nconst RANK_8 = 0\n\nconst ROOKS = {\n  w: [\n    { square: Ox88.a1, flag: BITS.QSIDE_CASTLE },\n    { square: Ox88.h1, flag: BITS.KSIDE_CASTLE },\n  ],\n  b: [\n    { square: Ox88.a8, flag: BITS.QSIDE_CASTLE },\n    { square: Ox88.h8, flag: BITS.KSIDE_CASTLE },\n  ],\n}\n\nconst SECOND_RANK = { b: RANK_7, w: RANK_2 }\n\nconst TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*']\n\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square: number): number {\n  return square >> 4\n}\n\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square: number): number {\n  return square & 0xf\n}\n\nfunction isDigit(c: string): boolean {\n  return '0123456789'.indexOf(c) !== -1\n}\n\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square: number): Square {\n  const f = file(square)\n  const r = rank(square)\n  return ('abcdefgh'.substring(f, f + 1) +\n    '87654321'.substring(r, r + 1)) as Square\n}\n\nfunction swapColor(color: Color): Color {\n  return color === WHITE ? BLACK : WHITE\n}\n\nexport function validateFen(fen: string) {\n  // 1st criterion: 6 space-seperated fields?\n  const tokens = fen.split(/\\s+/)\n  if (tokens.length !== 6) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: must contain six space-delimited fields',\n    }\n  }\n\n  // 2nd criterion: move number field is a integer value > 0?\n  const moveNumber = parseInt(tokens[5], 10)\n  if (isNaN(moveNumber) || moveNumber <= 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: move number must be a positive integer',\n    }\n  }\n\n  // 3rd criterion: half move counter is an integer >= 0?\n  const halfMoves = parseInt(tokens[4], 10)\n  if (isNaN(halfMoves) || halfMoves < 0) {\n    return {\n      ok: false,\n      error:\n        'Invalid FEN: half move counter number must be a non-negative integer',\n    }\n  }\n\n  // 4th criterion: 4th field is a valid e.p.-string?\n  if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n    return { ok: false, error: 'Invalid FEN: en-passant square is invalid' }\n  }\n\n  // 5th criterion: 3th field is a valid castle-string?\n  if (/[^kKqQ-]/.test(tokens[2])) {\n    return { ok: false, error: 'Invalid FEN: castling availability is invalid' }\n  }\n\n  // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n  if (!/^(w|b)$/.test(tokens[1])) {\n    return { ok: false, error: 'Invalid FEN: side-to-move is invalid' }\n  }\n\n  // 7th criterion: 1st field contains 8 rows?\n  const rows = tokens[0].split('/')\n  if (rows.length !== 8) {\n    return {\n      ok: false,\n      error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\",\n    }\n  }\n\n  // 8th criterion: every row is valid?\n  for (let i = 0; i < rows.length; i++) {\n    // check for right sum of fields AND not two numbers in succession\n    let sumFields = 0\n    let previousWasNumber = false\n\n    for (let k = 0; k < rows[i].length; k++) {\n      if (isDigit(rows[i][k])) {\n        if (previousWasNumber) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (consecutive number)',\n          }\n        }\n        sumFields += parseInt(rows[i][k], 10)\n        previousWasNumber = true\n      } else {\n        if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (invalid piece)',\n          }\n        }\n        sumFields += 1\n        previousWasNumber = false\n      }\n    }\n    if (sumFields !== 8) {\n      return {\n        ok: false,\n        error: 'Invalid FEN: piece data is invalid (too many squares in rank)',\n      }\n    }\n  }\n\n  if (\n    (tokens[3][1] == '3' && tokens[1] == 'w') ||\n    (tokens[3][1] == '6' && tokens[1] == 'b')\n  ) {\n    return { ok: false, error: 'Invalid FEN: illegal en-passant square' }\n  }\n\n  const kings = [\n    { color: 'white', regex: /K/g },\n    { color: 'black', regex: /k/g },\n  ]\n\n  for (const { color, regex } of kings) {\n    if (!regex.test(tokens[0])) {\n      return { ok: false, error: `Invalid FEN: missing ${color} king` }\n    }\n\n    if ((tokens[0].match(regex) || []).length > 1) {\n      return { ok: false, error: `Invalid FEN: too many ${color} kings` }\n    }\n  }\n\n  return { ok: true }\n}\n\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move: InternalMove, moves: InternalMove[]) {\n  const from = move.from\n  const to = move.to\n  const piece = move.piece\n\n  let ambiguities = 0\n  let sameRank = 0\n  let sameFile = 0\n\n  for (let i = 0, len = moves.length; i < len; i++) {\n    const ambigFrom = moves[i].from\n    const ambigTo = moves[i].to\n    const ambigPiece = moves[i].piece\n\n    /*\n     * if a move of the same piece type ends on the same to square, we'll need\n     * to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n      ambiguities++\n\n      if (rank(from) === rank(ambigFrom)) {\n        sameRank++\n      }\n\n      if (file(from) === file(ambigFrom)) {\n        sameFile++\n      }\n    }\n  }\n\n  if (ambiguities > 0) {\n    if (sameRank > 0 && sameFile > 0) {\n      /*\n       * if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      return algebraic(from)\n    } else if (sameFile > 0) {\n      /*\n       * if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1)\n    } else {\n      // else use the file symbol\n      return algebraic(from).charAt(0)\n    }\n  }\n\n  return ''\n}\n\nfunction addMove(\n  moves: InternalMove[],\n  color: Color,\n  from: number,\n  to: number,\n  piece: PieceSymbol,\n  captured: PieceSymbol | undefined = undefined,\n  flags: number = BITS.NORMAL\n) {\n  const r = rank(to)\n\n  if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n    for (let i = 0; i < PROMOTIONS.length; i++) {\n      const promotion = PROMOTIONS[i]\n      moves.push({\n        color,\n        from,\n        to,\n        piece,\n        captured,\n        promotion,\n        flags: flags | BITS.PROMOTION,\n      })\n    }\n  } else {\n    moves.push({\n      color,\n      from,\n      to,\n      piece,\n      captured,\n      flags,\n    })\n  }\n}\n\nfunction inferPieceType(san: string) {\n  let pieceType = san.charAt(0)\n  if (pieceType >= 'a' && pieceType <= 'h') {\n    const matches = san.match(/[a-h]\\d.*[a-h]\\d/)\n    if (matches) {\n      return undefined\n    }\n    return PAWN\n  }\n  pieceType = pieceType.toLowerCase()\n  if (pieceType === 'o') {\n    return KING\n  }\n  return pieceType as PieceSymbol\n}\n\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move: string) {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\n}\n\nexport class Chess {\n  private _board = new Array<Piece>(128)\n  private _turn: Color = WHITE\n  private _header: Record<string, string> = {}\n  private _kings: Record<Color, number> = { w: EMPTY, b: EMPTY }\n  private _epSquare = -1\n  private _halfMoves = 0\n  private _moveNumber = 0\n  private _history: History[] = []\n  private _comments: Record<string, string> = {}\n  private _castling: Record<Color, number> = { w: 0, b: 0 }\n\n  constructor(fen = DEFAULT_POSITION) {\n    this.load(fen)\n  }\n\n  clear(keepHeaders = false) {\n    this._board = new Array<Piece>(128)\n    this._kings = { w: EMPTY, b: EMPTY }\n    this._turn = WHITE\n    this._castling = { w: 0, b: 0 }\n    this._epSquare = EMPTY\n    this._halfMoves = 0\n    this._moveNumber = 1\n    this._history = []\n    this._comments = {}\n    this._header = keepHeaders ? this._header : {}\n    this._updateSetup(this.fen())\n  }\n\n  load(fen: string, keepHeaders = false) {\n    let tokens = fen.split(/\\s+/)\n\n    // append commonly omitted fen tokens\n    if (tokens.length >= 2 && tokens.length < 6) {\n      const adjustments = ['-', '-', '0', '1']\n      fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ')\n    }\n\n    tokens = fen.split(/\\s+/)\n\n    const { ok, error } = validateFen(fen)\n    if (!ok) {\n      throw new Error(error)\n    }\n\n    const position = tokens[0]\n    let square = 0\n\n    this.clear(keepHeaders)\n\n    for (let i = 0; i < position.length; i++) {\n      const piece = position.charAt(i)\n\n      if (piece === '/') {\n        square += 8\n      } else if (isDigit(piece)) {\n        square += parseInt(piece, 10)\n      } else {\n        const color = piece < 'a' ? WHITE : BLACK\n        this.put(\n          { type: piece.toLowerCase() as PieceSymbol, color },\n          algebraic(square)\n        )\n        square++\n      }\n    }\n\n    this._turn = tokens[1] as Color\n\n    if (tokens[2].indexOf('K') > -1) {\n      this._castling.w |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      this._castling.w |= BITS.QSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      this._castling.b |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      this._castling.b |= BITS.QSIDE_CASTLE\n    }\n\n    this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3] as Square]\n    this._halfMoves = parseInt(tokens[4], 10)\n    this._moveNumber = parseInt(tokens[5], 10)\n\n    this._updateSetup(this.fen())\n  }\n\n  fen() {\n    let empty = 0\n    let fen = ''\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i]) {\n        if (empty > 0) {\n          fen += empty\n          empty = 0\n        }\n        const { color, type: piece } = this._board[i]\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n      } else {\n        empty++\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty\n        }\n\n        if (i !== Ox88.h1) {\n          fen += '/'\n        }\n\n        empty = 0\n        i += 8\n      }\n    }\n\n    let castling = ''\n    if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n      castling += 'K'\n    }\n    if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n      castling += 'Q'\n    }\n    if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n      castling += 'k'\n    }\n    if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n      castling += 'q'\n    }\n\n    // do we have an empty castling flag?\n    castling = castling || '-'\n\n    let epSquare = '-'\n    /*\n     * only print the ep square if en passant is a valid move (pawn is present\n     * and ep capture is not pinned)\n     */\n    if (this._epSquare !== EMPTY) {\n      const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16)\n      const squares = [bigPawnSquare + 1, bigPawnSquare - 1]\n\n      for (const square of squares) {\n        // is the square off the board?\n        if (square & 0x88) {\n          continue\n        }\n\n        const color = this._turn\n\n        // is there a pawn that can capture the epSquare?\n        if (\n          this._board[square]?.color === color &&\n          this._board[square]?.type === PAWN\n        ) {\n          // if the pawn makes an ep capture, does it leave it's king in check?\n          this._makeMove({\n            color,\n            from: square,\n            to: this._epSquare,\n            piece: PAWN,\n            captured: PAWN,\n            flags: BITS.EP_CAPTURE,\n          })\n          const isLegal = !this._isKingAttacked(color)\n          this._undoMove()\n\n          // if ep is legal, break and set the ep square in the FEN output\n          if (isLegal) {\n            epSquare = algebraic(this._epSquare)\n            break\n          }\n        }\n      }\n    }\n\n    return [\n      fen,\n      this._turn,\n      castling,\n      epSquare,\n      this._halfMoves,\n      this._moveNumber,\n    ].join(' ')\n  }\n\n  /*\n   * Called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object. If the FEN\n   * is equal to the default position, the SetUp and FEN are deleted the setup\n   * is only updated if history.length is zero, ie moves haven't been made.\n   */\n  private _updateSetup(fen: string) {\n    if (this._history.length > 0) return\n\n    if (fen !== DEFAULT_POSITION) {\n      this._header['SetUp'] = '1'\n      this._header['FEN'] = fen\n    } else {\n      delete this._header['SetUp']\n      delete this._header['FEN']\n    }\n  }\n\n  reset() {\n    this.load(DEFAULT_POSITION)\n  }\n\n  get(square: Square) {\n    return this._board[Ox88[square]] || false\n  }\n\n  put({ type, color }: { type: PieceSymbol; color: Color }, square: Square) {\n    // check for piece\n    if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n      return false\n    }\n\n    // check for valid square\n    if (!(square in Ox88)) {\n      return false\n    }\n\n    const sq = Ox88[square]\n\n    // don't let the user place more than one king\n    if (\n      type == KING &&\n      !(this._kings[color] == EMPTY || this._kings[color] == sq)\n    ) {\n      return false\n    }\n\n    this._board[sq] = { type: type as PieceSymbol, color: color as Color }\n\n    if (type === KING) {\n      this._kings[color] = sq\n    }\n\n    this._updateSetup(this.fen())\n\n    return true\n  }\n\n  remove(square: Square) {\n    const piece = this.get(square)\n    delete this._board[Ox88[square]]\n    if (piece && piece.type === KING) {\n      this._kings[piece.color] = EMPTY\n    }\n\n    this._updateSetup(this.fen())\n\n    return piece\n  }\n\n  _attacked(color: Color, square: number) {\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      // if empty square or wrong color\n      if (this._board[i] === undefined || this._board[i].color !== color) {\n        continue\n      }\n\n      const piece = this._board[i]\n      const difference = i - square\n\n      // skip - to/from square are the same\n      if (difference === 0) {\n        continue\n      }\n\n      const index = difference + 119\n\n      if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true\n          } else {\n            if (piece.color === BLACK) return true\n          }\n          continue\n        }\n\n        // if the piece is a knight or a king\n        if (piece.type === 'n' || piece.type === 'k') return true\n\n        const offset = RAYS[index]\n        let j = i + offset\n\n        let blocked = false\n        while (j !== square) {\n          if (this._board[j] != null) {\n            blocked = true\n            break\n          }\n          j += offset\n        }\n\n        if (!blocked) return true\n      }\n    }\n\n    return false\n  }\n\n  private _isKingAttacked(color: Color) {\n    return this._attacked(swapColor(color), this._kings[color])\n  }\n\n  isAttacked(square: Square, attackedBy: Color) {\n    return this._attacked(attackedBy, Ox88[square])\n  }\n\n  isCheck() {\n    return this._isKingAttacked(this._turn)\n  }\n\n  inCheck() {\n    return this.isCheck()\n  }\n\n  isCheckmate() {\n    return this.isCheck() && this._moves().length === 0\n  }\n\n  isStalemate() {\n    return !this.isCheck() && this._moves().length === 0\n  }\n\n  isInsufficientMaterial() {\n    /*\n     * k.b. vs k.b. (of opposite colors) with mate in 1:\n     * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n     *\n     * k.b. vs k.n. with mate in 1:\n     * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n     */\n    const pieces: Record<PieceSymbol, number> = {\n      b: 0,\n      n: 0,\n      r: 0,\n      q: 0,\n      k: 0,\n      p: 0,\n    }\n    const bishops = []\n    let numPieces = 0\n    let squareColor = 0\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      squareColor = (squareColor + 1) % 2\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      const piece = this._board[i]\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\n        if (piece.type === BISHOP) {\n          bishops.push(squareColor)\n        }\n        numPieces++\n      }\n    }\n\n    // k vs. k\n    if (numPieces === 2) {\n      return true\n    } else if (\n      // k vs. kn .... or .... k vs. kb\n      numPieces === 3 &&\n      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n    ) {\n      return true\n    } else if (numPieces === pieces[BISHOP] + 2) {\n      // kb vs. kb where any number of bishops are all on the same color\n      let sum = 0\n      const len = bishops.length\n      for (let i = 0; i < len; i++) {\n        sum += bishops[i]\n      }\n      if (sum === 0 || sum === len) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  isThreefoldRepetition() {\n    const moves = []\n    const positions: Record<string, number> = {}\n    let repetition = false\n\n    while (true) {\n      const move = this._undoMove()\n      if (!move) break\n      moves.push(move)\n    }\n\n    while (true) {\n      /*\n       * remove the last two fields in the FEN string, they're not needed when\n       * checking for draw by rep\n       */\n      const fen = this.fen().split(' ').slice(0, 4).join(' ')\n\n      // has the position occurred three or move times\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1\n      if (positions[fen] >= 3) {\n        repetition = true\n      }\n\n      const move = moves.pop()\n\n      if (!move) {\n        break\n      } else {\n        this._makeMove(move)\n      }\n    }\n\n    return repetition\n  }\n\n  isDraw() {\n    return (\n      this._halfMoves >= 100 || // 50 moves per side = 100 half moves\n      this.isStalemate() ||\n      this.isInsufficientMaterial() ||\n      this.isThreefoldRepetition()\n    )\n  }\n\n  isGameOver() {\n    return this.isCheckmate() || this.isStalemate() || this.isDraw()\n  }\n\n  moves(): string[]\n  moves({ square }: { square: Square }): string[]\n  moves({ verbose, square }: { verbose: true; square?: Square }): Move[]\n  moves({ verbose, square }: { verbose: false; square?: Square }): string[]\n  moves({\n    verbose,\n    square,\n  }: {\n    verbose?: boolean\n    square?: Square\n  }): string[] | Move[]\n  moves({\n    verbose = false,\n    square = undefined,\n  }: { verbose?: boolean; square?: Square } = {}) {\n    const moves = this._moves({ square })\n\n    if (verbose) {\n      return moves.map((move) => this._makePretty(move))\n    } else {\n      return moves.map((move) => this._moveToSan(move, moves))\n    }\n  }\n\n  _moves({\n    legal = true,\n    piece = undefined,\n    square = undefined,\n  }: {\n    legal?: boolean\n    piece?: PieceSymbol\n    square?: Square\n  } = {}) {\n    const forSquare = square ? (square.toLowerCase() as Square) : undefined\n    const forPiece = piece?.toLowerCase()\n\n    const moves: InternalMove[] = []\n    const us = this._turn\n    const them = swapColor(us)\n\n    let firstSquare = Ox88.a8\n    let lastSquare = Ox88.h1\n    let singleSquare = false\n\n    // are we generating moves for a single square?\n    if (forSquare) {\n      // illegal square, return empty moves\n      if (!(forSquare in Ox88)) {\n        return []\n      } else {\n        firstSquare = lastSquare = Ox88[forSquare]\n        singleSquare = true\n      }\n    }\n\n    for (let from = firstSquare; from <= lastSquare; from++) {\n      // did we run off the end of the board\n      if (from & 0x88) {\n        from += 7\n        continue\n      }\n\n      // empty square or opponent, skip\n      if (!this._board[from] || this._board[from].color === them) {\n        continue\n      }\n      const { type } = this._board[from]\n\n      let to: number\n      if (type === PAWN) {\n        if (forPiece && forPiece !== type) continue\n\n        // single square, non-capturing\n        to = from + PAWN_OFFSETS[us][0]\n        if (!this._board[to]) {\n          addMove(moves, us, from, to, PAWN)\n\n          // double square\n          to = from + PAWN_OFFSETS[us][1]\n          if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n            addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN)\n          }\n        }\n\n        // pawn captures\n        for (let j = 2; j < 4; j++) {\n          to = from + PAWN_OFFSETS[us][j]\n          if (to & 0x88) continue\n\n          if (this._board[to]?.color === them) {\n            addMove(\n              moves,\n              us,\n              from,\n              to,\n              PAWN,\n              this._board[to].type,\n              BITS.CAPTURE\n            )\n          } else if (to === this._epSquare) {\n            addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE)\n          }\n        }\n      } else {\n        if (forPiece && forPiece !== type) continue\n\n        for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n          const offset = PIECE_OFFSETS[type][j]\n          to = from\n\n          while (true) {\n            to += offset\n            if (to & 0x88) break\n\n            if (!this._board[to]) {\n              addMove(moves, us, from, to, type)\n            } else {\n              // own color, stop loop\n              if (this._board[to].color === us) break\n\n              addMove(\n                moves,\n                us,\n                from,\n                to,\n                type,\n                this._board[to].type,\n                BITS.CAPTURE\n              )\n              break\n            }\n\n            /* break, if knight or king */\n            if (type === KNIGHT || type === KING) break\n          }\n        }\n      }\n    }\n\n    /*\n     * check for castling if we're:\n     *   a) generating all moves, or\n     *   b) doing single square move generation on the king's square\n     */\n\n    if (forPiece === undefined || forPiece === KING) {\n      if (!singleSquare || lastSquare === this._kings[us]) {\n        // king-side castling\n        if (this._castling[us] & BITS.KSIDE_CASTLE) {\n          const castlingFrom = this._kings[us]\n          const castlingTo = castlingFrom + 2\n\n          if (\n            !this._board[castlingFrom + 1] &&\n            !this._board[castlingTo] &&\n            !this._attacked(them, this._kings[us]) &&\n            !this._attacked(them, castlingFrom + 1) &&\n            !this._attacked(them, castlingTo)\n          ) {\n            addMove(\n              moves,\n              us,\n              this._kings[us],\n              castlingTo,\n              KING,\n              undefined,\n              BITS.KSIDE_CASTLE\n            )\n          }\n        }\n\n        // queen-side castling\n        if (this._castling[us] & BITS.QSIDE_CASTLE) {\n          const castlingFrom = this._kings[us]\n          const castlingTo = castlingFrom - 2\n\n          if (\n            !this._board[castlingFrom - 1] &&\n            !this._board[castlingFrom - 2] &&\n            !this._board[castlingFrom - 3] &&\n            !this._attacked(them, this._kings[us]) &&\n            !this._attacked(them, castlingFrom - 1) &&\n            !this._attacked(them, castlingTo)\n          ) {\n            addMove(\n              moves,\n              us,\n              this._kings[us],\n              castlingTo,\n              KING,\n              undefined,\n              BITS.QSIDE_CASTLE\n            )\n          }\n        }\n      }\n    }\n\n    /*\n     * return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves\n    }\n\n    // filter out illegal moves\n    const legalMoves = []\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i])\n      if (!this._isKingAttacked(us)) {\n        legalMoves.push(moves[i])\n      }\n      this._undoMove()\n    }\n\n    return legalMoves\n  }\n\n  move(\n    move: string | { from: string; to: string; promotion?: string },\n    { strict = false }: { strict?: boolean } = {}\n  ) {\n    /*\n     * The move function can be called with in the following parameters:\n     *\n     * .move('Nxb7')       <- argument is a case-sensitive SAN string\n     *\n     * .move({ from: 'h7', <- argument is a move object\n     *         to :'h8',\n     *         promotion: 'q' })\n     *\n     *\n     * An optional strict argument may be supplied to tell chess.js to\n     * strictly follow the SAN specification.\n     */\n\n    let moveObj = null\n\n    if (typeof move === 'string') {\n      moveObj = this._moveFromSan(move, strict)\n    } else if (typeof move === 'object') {\n      const moves = this._moves()\n\n      // convert the pretty move object to an ugly move object\n      for (let i = 0, len = moves.length; i < len; i++) {\n        if (\n          move.from === algebraic(moves[i].from) &&\n          move.to === algebraic(moves[i].to) &&\n          (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)\n        ) {\n          moveObj = moves[i]\n          break\n        }\n      }\n    }\n\n    // failed to find move\n    if (!moveObj) {\n      if (typeof move === 'string') {\n        throw new Error(`Invalid move: ${move}`)\n      } else {\n        throw new Error(`Invalid move: ${JSON.stringify(move)}`)\n      }\n    }\n\n    /*\n     * need to make a copy of move because we can't generate SAN after the move\n     * is made\n     */\n    const prettyMove = this._makePretty(moveObj)\n\n    this._makeMove(moveObj)\n\n    return prettyMove\n  }\n\n  _push(move: InternalMove) {\n    this._history.push({\n      move,\n      kings: { b: this._kings.b, w: this._kings.w },\n      turn: this._turn,\n      castling: { b: this._castling.b, w: this._castling.w },\n      epSquare: this._epSquare,\n      halfMoves: this._halfMoves,\n      moveNumber: this._moveNumber,\n    })\n  }\n\n  private _makeMove(move: InternalMove) {\n    const us = this._turn\n    const them = swapColor(us)\n    this._push(move)\n\n    this._board[move.to] = this._board[move.from]\n    delete this._board[move.from]\n\n    // if ep capture, remove the captured pawn\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (this._turn === BLACK) {\n        delete this._board[move.to - 16]\n      } else {\n        delete this._board[move.to + 16]\n      }\n    }\n\n    // if pawn promotion, replace with new piece\n    if (move.promotion) {\n      this._board[move.to] = { type: move.promotion, color: us }\n    }\n\n    // if we moved the king\n    if (this._board[move.to].type === KING) {\n      this._kings[us] = move.to\n\n      // if we castled, move the rook next to the king\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        const castlingTo = move.to - 1\n        const castlingFrom = move.to + 1\n        this._board[castlingTo] = this._board[castlingFrom]\n        delete this._board[castlingFrom]\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        const castlingTo = move.to + 1\n        const castlingFrom = move.to - 2\n        this._board[castlingTo] = this._board[castlingFrom]\n        delete this._board[castlingFrom]\n      }\n\n      // turn off castling\n      this._castling[us] = 0\n    }\n\n    // turn off castling if we move a rook\n    if (this._castling[us]) {\n      for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (\n          move.from === ROOKS[us][i].square &&\n          this._castling[us] & ROOKS[us][i].flag\n        ) {\n          this._castling[us] ^= ROOKS[us][i].flag\n          break\n        }\n      }\n    }\n\n    // turn off castling if we capture a rook\n    if (this._castling[them]) {\n      for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (\n          move.to === ROOKS[them][i].square &&\n          this._castling[them] & ROOKS[them][i].flag\n        ) {\n          this._castling[them] ^= ROOKS[them][i].flag\n          break\n        }\n      }\n    }\n\n    // if big pawn move, update the en passant square\n    if (move.flags & BITS.BIG_PAWN) {\n      if (us === BLACK) {\n        this._epSquare = move.to - 16\n      } else {\n        this._epSquare = move.to + 16\n      }\n    } else {\n      this._epSquare = EMPTY\n    }\n\n    // reset the 50 move counter if a pawn is moved or a piece is captured\n    if (move.piece === PAWN) {\n      this._halfMoves = 0\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      this._halfMoves = 0\n    } else {\n      this._halfMoves++\n    }\n\n    if (us === BLACK) {\n      this._moveNumber++\n    }\n\n    this._turn = them\n  }\n\n  undo() {\n    const move = this._undoMove()\n    return move ? this._makePretty(move) : null\n  }\n\n  private _undoMove() {\n    const old = this._history.pop()\n    if (old === undefined) {\n      return null\n    }\n\n    const move = old.move\n\n    this._kings = old.kings\n    this._turn = old.turn\n    this._castling = old.castling\n    this._epSquare = old.epSquare\n    this._halfMoves = old.halfMoves\n    this._moveNumber = old.moveNumber\n\n    const us = this._turn\n    const them = swapColor(us)\n\n    this._board[move.from] = this._board[move.to]\n    this._board[move.from].type = move.piece // to undo any promotions\n    delete this._board[move.to]\n\n    if (move.captured) {\n      if (move.flags & BITS.EP_CAPTURE) {\n        // en passant capture\n        let index: number\n        if (us === BLACK) {\n          index = move.to - 16\n        } else {\n          index = move.to + 16\n        }\n        this._board[index] = { type: PAWN, color: them }\n      } else {\n        // regular capture\n        this._board[move.to] = { type: move.captured, color: them }\n      }\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      let castlingTo: number, castlingFrom: number\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castlingTo = move.to + 1\n        castlingFrom = move.to - 1\n      } else {\n        castlingTo = move.to - 2\n        castlingFrom = move.to + 1\n      }\n\n      this._board[castlingTo] = this._board[castlingFrom]\n      delete this._board[castlingFrom]\n    }\n\n    return move\n  }\n\n  pgn({\n    newline = '\\n',\n    maxWidth = 0,\n  }: { newline?: string; maxWidth?: number } = {}) {\n    /*\n     * using the specification from http://www.chessclub.com/help/PGN-spec\n     * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n     */\n\n    const result: string[] = []\n    let headerExists = false\n\n    /* add the PGN header information */\n    for (const i in this._header) {\n      /*\n       * TODO: order of enumerated properties in header object is not\n       * guaranteed, see ECMA-262 spec (section 12.6.4)\n       */\n      result.push('[' + i + ' \"' + this._header[i] + '\"]' + newline)\n      headerExists = true\n    }\n\n    if (headerExists && this._history.length) {\n      result.push(newline)\n    }\n\n    const appendComment = (moveString: string) => {\n      const comment = this._comments[this.fen()]\n      if (typeof comment !== 'undefined') {\n        const delimiter = moveString.length > 0 ? ' ' : ''\n        moveString = `${moveString}${delimiter}{${comment}}`\n      }\n      return moveString\n    }\n\n    // pop all of history onto reversed_history\n    const reversedHistory = []\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    const moves = []\n    let moveString = ''\n\n    // special case of a commented starting position with no moves\n    if (reversedHistory.length === 0) {\n      moves.push(appendComment(''))\n    }\n\n    // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n    while (reversedHistory.length > 0) {\n      moveString = appendComment(moveString)\n      const move = reversedHistory.pop()\n\n      // make TypeScript stop complaining about move being undefined\n      if (!move) {\n        break\n      }\n\n      // if the position started with black to move, start PGN with #. ...\n      if (!this._history.length && move.color === 'b') {\n        const prefix = `${this._moveNumber}. ...`\n        // is there a comment preceding the first move?\n        moveString = moveString ? `${moveString} ${prefix}` : prefix\n      } else if (move.color === 'w') {\n        // store the previous generated move_string if we have one\n        if (moveString.length) {\n          moves.push(moveString)\n        }\n        moveString = this._moveNumber + '.'\n      }\n\n      moveString =\n        moveString + ' ' + this._moveToSan(move, this._moves({ legal: true }))\n      this._makeMove(move)\n    }\n\n    // are there any other leftover moves?\n    if (moveString.length) {\n      moves.push(appendComment(moveString))\n    }\n\n    // is there a result?\n    if (typeof this._header.Result !== 'undefined') {\n      moves.push(this._header.Result)\n    }\n\n    /*\n     * history should be back to what it was before we started generating PGN,\n     * so join together moves\n     */\n    if (maxWidth === 0) {\n      return result.join('') + moves.join(' ')\n    }\n\n    // TODO (jah): huh?\n    const strip = function () {\n      if (result.length > 0 && result[result.length - 1] === ' ') {\n        result.pop()\n        return true\n      }\n      return false\n    }\n\n    // NB: this does not preserve comment whitespace.\n    const wrapComment = function (width: number, move: string) {\n      for (const token of move.split(' ')) {\n        if (!token) {\n          continue\n        }\n        if (width + token.length > maxWidth) {\n          while (strip()) {\n            width--\n          }\n          result.push(newline)\n          width = 0\n        }\n        result.push(token)\n        width += token.length\n        result.push(' ')\n        width++\n      }\n      if (strip()) {\n        width--\n      }\n      return width\n    }\n\n    // wrap the PGN output at max_width\n    let currentWidth = 0\n    for (let i = 0; i < moves.length; i++) {\n      if (currentWidth + moves[i].length > maxWidth) {\n        if (moves[i].includes('{')) {\n          currentWidth = wrapComment(currentWidth, moves[i])\n          continue\n        }\n      }\n      // if the current move will push past max_width\n      if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n        // don't end the line with whitespace\n        if (result[result.length - 1] === ' ') {\n          result.pop()\n        }\n\n        result.push(newline)\n        currentWidth = 0\n      } else if (i !== 0) {\n        result.push(' ')\n        currentWidth++\n      }\n      result.push(moves[i])\n      currentWidth += moves[i].length\n    }\n\n    return result.join('')\n  }\n\n  header(...args: string[]) {\n    for (let i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        this._header[args[i]] = args[i + 1]\n      }\n    }\n    return this._header\n  }\n\n  loadPgn(\n    pgn: string,\n    {\n      strict = false,\n      newlineChar = '\\r?\\n',\n    }: { strict?: boolean; newlineChar?: string } = {}\n  ) {\n    function mask(str: string): string {\n      return str.replace(/\\\\/g, '\\\\')\n    }\n\n    function parsePgnHeader(header: string): { [key: string]: string } {\n      const headerObj: Record<string, string> = {}\n      const headers = header.split(new RegExp(mask(newlineChar)))\n      let key = ''\n      let value = ''\n\n      for (let i = 0; i < headers.length; i++) {\n        const regex = /^\\s*\\[\\s*([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/\n        key = headers[i].replace(regex, '$1')\n        value = headers[i].replace(regex, '$2')\n        if (key.trim().length > 0) {\n          headerObj[key] = value\n        }\n      }\n\n      return headerObj\n    }\n\n    // strip whitespace from head/tail of PGN block\n    pgn = pgn.trim()\n\n    /*\n     * RegExp to split header. Takes advantage of the fact that header and movetext\n     * will always have a blank line between them (ie, two newline_char's). Handles\n     * case where movetext is empty by matching newlineChar until end of string is\n     * matched - effectively trimming from the end extra newlineChar.\n     *\n     * With default newline_char, will equal:\n     * /^(\\[((?:\\r?\\n)|.)*\\])((?:\\s*\\r?\\n){2}|(?:\\s*\\r?\\n)*$)/\n     */\n    const headerRegex = new RegExp(\n      '^(\\\\[((?:' +\n        mask(newlineChar) +\n        ')|.)*\\\\])' +\n        '((?:\\\\s*' +\n        mask(newlineChar) +\n        '){2}|(?:\\\\s*' +\n        mask(newlineChar) +\n        ')*$)'\n    )\n\n    // If no header given, begin with moves.\n    const headerRegexResults = headerRegex.exec(pgn)\n    const headerString = headerRegexResults\n      ? headerRegexResults.length >= 2\n        ? headerRegexResults[1]\n        : ''\n      : ''\n\n    // Put the board in the starting position\n    this.reset()\n\n    // parse PGN header\n    const headers = parsePgnHeader(headerString)\n    let fen = ''\n\n    for (const key in headers) {\n      // check to see user is including fen (possibly with wrong tag case)\n      if (key.toLowerCase() === 'fen') {\n        fen = headers[key]\n      }\n\n      this.header(key, headers[key])\n    }\n\n    /*\n     * the permissive parser should attempt to load a fen tag, even if it's the\n     * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n     */\n    if (!strict) {\n      if (fen) {\n        this.load(fen, true)\n      }\n    } else {\n      /*\n       * strict parser - load the starting position indicated by [Setup '1']\n       * and [FEN position]\n       */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers)) {\n          throw new Error(\n            'Invalid PGN: FEN tag must be supplied with SetUp tag'\n          )\n        }\n        // second argument to load: don't clear the headers\n        this.load(headers['FEN'], true)\n      }\n    }\n\n    /*\n     * NB: the regexes below that delete move numbers, recursive annotations,\n     * and numeric annotation glyphs may also match text in comments. To\n     * prevent this, we transform comments by hex-encoding them in place and\n     * decoding them again after the other tokens have been deleted.\n     *\n     * While the spec states that PGN files should be ASCII encoded, we use\n     * {en,de}codeURIComponent here to support arbitrary UTF8 as a convenience\n     * for modern users\n     */\n\n    function toHex(s: string): string {\n      return Array.from(s)\n        .map(function (c) {\n          /*\n           * encodeURI doesn't transform most ASCII characters, so we handle\n           * these ourselves\n           */\n          return c.charCodeAt(0) < 128\n            ? c.charCodeAt(0).toString(16)\n            : encodeURIComponent(c).replace(/%/g, '').toLowerCase()\n        })\n        .join('')\n    }\n\n    function fromHex(s: string): string {\n      return s.length == 0\n        ? ''\n        : decodeURIComponent('%' + (s.match(/.{1,2}/g) || []).join('%'))\n    }\n\n    const encodeComment = function (s: string) {\n      s = s.replace(new RegExp(mask(newlineChar), 'g'), ' ')\n      return `{${toHex(s.slice(1, s.length - 1))}}`\n    }\n\n    const decodeComment = function (s: string) {\n      if (s.startsWith('{') && s.endsWith('}')) {\n        return fromHex(s.slice(1, s.length - 1))\n      }\n    }\n\n    // delete header to get the moves\n    let ms = pgn\n      .replace(headerString, '')\n      .replace(\n        // encode comments so they don't get deleted below\n        new RegExp(`({[^}]*})+?|;([^${mask(newlineChar)}]*)`, 'g'),\n        function (_match, bracket, semicolon) {\n          return bracket !== undefined\n            ? encodeComment(bracket)\n            : ' ' + encodeComment(`{${semicolon.slice(1)}}`)\n        }\n      )\n      .replace(new RegExp(mask(newlineChar), 'g'), ' ')\n\n    // delete recursive annotation variations\n    const ravRegex = /(\\([^()]+\\))+?/g\n    while (ravRegex.test(ms)) {\n      ms = ms.replace(ravRegex, '')\n    }\n\n    // delete move numbers\n    ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\n\n    // delete ... indicating black to move\n    ms = ms.replace(/\\.\\.\\./g, '')\n\n    /* delete numeric annotation glyphs */\n    ms = ms.replace(/\\$\\d+/g, '')\n\n    // trim and get array of moves\n    let moves = ms.trim().split(new RegExp(/\\s+/))\n\n    // delete empty entries\n    moves = moves.filter((move) => move !== '')\n\n    let result = ''\n\n    for (let halfMove = 0; halfMove < moves.length; halfMove++) {\n      const comment = decodeComment(moves[halfMove])\n      if (comment !== undefined) {\n        this._comments[this.fen()] = comment\n        continue\n      }\n\n      const move = this._moveFromSan(moves[halfMove], strict)\n\n      // invalid move\n      if (move == null) {\n        // was the move an end of game marker\n        if (TERMINATION_MARKERS.indexOf(moves[halfMove]) > -1) {\n          result = moves[halfMove]\n        } else {\n          throw new Error(`Invalid move in PGN: ${moves[halfMove]}`)\n        }\n      } else {\n        // reset the end of game marker if making a valid move\n        result = ''\n        this._makeMove(move)\n      }\n    }\n\n    /*\n     * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n     * the termination marker. Only do this when headers are present, but the\n     * result tag is missing\n     */\n\n    if (result && Object.keys(this._header).length && !this._header['Result']) {\n      this.header('Result', result)\n    }\n  }\n\n  /*\n   * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} strict Use the strict SAN parser. It will throw errors\n   * on overly disambiguated moves (see below):\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n\n  private _moveToSan(move: InternalMove, moves: InternalMove[]) {\n    let output = ''\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O'\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O'\n    } else {\n      if (move.piece !== PAWN) {\n        const disambiguator = getDisambiguator(move, moves)\n        output += move.piece.toUpperCase() + disambiguator\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0]\n        }\n        output += 'x'\n      }\n\n      output += algebraic(move.to)\n\n      if (move.promotion) {\n        output += '=' + move.promotion.toUpperCase()\n      }\n    }\n\n    this._makeMove(move)\n    if (this.isCheck()) {\n      if (this.isCheckmate()) {\n        output += '#'\n      } else {\n        output += '+'\n      }\n    }\n    this._undoMove()\n\n    return output\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  private _moveFromSan(move: string, strict = false): InternalMove | null {\n    // strip off any move decorations: e.g Nf3+?! becomes Nf3\n    const cleanMove = strippedSan(move)\n\n    let pieceType = inferPieceType(cleanMove)\n    let moves = this._moves({ legal: true, piece: pieceType })\n\n    // strict parser\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n        return moves[i]\n      }\n    }\n\n    // the strict parser failed\n    if (strict) {\n      return null\n    }\n\n    let piece = undefined\n    let matches = undefined\n    let from = undefined\n    let to = undefined\n    let promotion = undefined\n\n    /*\n     * The default permissive (non-strict) parser allows the user to parse\n     * non-standard chess notations. This parser is only run after the strict\n     * Standard Algebraic Notation (SAN) parser has failed.\n     *\n     * When running the permissive parser, we'll run a regex to grab the piece, the\n     * to/from square, and an optional promotion piece. This regex will\n     * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n     * f7f8q, b1c3\n     *\n     * NOTE: Some positions and moves may be ambiguous when using the permissive\n     * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n     * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n     * move). In these cases, the permissive parser will default to the most\n     * basic interpretation (which is b1c3 parsing to Nc3).\n     */\n\n    let overlyDisambiguated = false\n\n    matches = cleanMove.match(\n      /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\n      //     piece         from              to       promotion\n    )\n\n    if (matches) {\n      piece = matches[1]\n      from = matches[2] as Square\n      to = matches[3] as Square\n      promotion = matches[4]\n\n      if (from.length == 1) {\n        overlyDisambiguated = true\n      }\n    } else {\n      /*\n       * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n       * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n       * there is one legal knight move to e7). In this case, the value of\n       * 'from' variable will be a rank or file, not a square.\n       */\n\n      matches = cleanMove.match(\n        /([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/\n      )\n\n      if (matches) {\n        piece = matches[1]\n        from = matches[2] as Square\n        to = matches[3] as Square\n        promotion = matches[4]\n\n        if (from.length == 1) {\n          overlyDisambiguated = true\n        }\n      }\n    }\n\n    pieceType = inferPieceType(cleanMove)\n    moves = this._moves({\n      legal: true,\n      piece: piece ? (piece as PieceSymbol) : pieceType,\n    })\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (from && to) {\n        // hand-compare move properties with the results from our permissive regex\n        if (\n          (!piece || piece.toLowerCase() == moves[i].piece) &&\n          Ox88[from] == moves[i].from &&\n          Ox88[to] == moves[i].to &&\n          (!promotion || promotion.toLowerCase() == moves[i].promotion)\n        ) {\n          return moves[i]\n        } else if (overlyDisambiguated) {\n          /*\n           * SPECIAL CASE: we parsed a move string that may have an unneeded\n           * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n           */\n\n          const square = algebraic(moves[i].from)\n          if (\n            (!piece || piece.toLowerCase() == moves[i].piece) &&\n            Ox88[to] == moves[i].to &&\n            (from == square[0] || from == square[1]) &&\n            (!promotion || promotion.toLowerCase() == moves[i].promotion)\n          ) {\n            return moves[i]\n          }\n        }\n      }\n    }\n\n    return null\n  }\n\n  ascii() {\n    let s = '   +------------------------+\\n'\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // display the rank\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |'\n      }\n\n      if (this._board[i]) {\n        const piece = this._board[i].type\n        const color = this._board[i].color\n        const symbol =\n          color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n        s += ' ' + symbol + ' '\n      } else {\n        s += ' . '\n      }\n\n      if ((i + 1) & 0x88) {\n        s += '|\\n'\n        i += 8\n      }\n    }\n    s += '   +------------------------+\\n'\n    s += '     a  b  c  d  e  f  g  h'\n\n    return s\n  }\n\n  perft(depth: number) {\n    const moves = this._moves({ legal: false })\n    let nodes = 0\n    const color = this._turn\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i])\n      if (!this._isKingAttacked(color)) {\n        if (depth - 1 > 0) {\n          nodes += this.perft(depth - 1)\n        } else {\n          nodes++\n        }\n      }\n      this._undoMove()\n    }\n\n    return nodes\n  }\n\n  // pretty = external move object\n  private _makePretty(uglyMove: InternalMove): Move {\n    const { color, piece, from, to, flags, captured, promotion } = uglyMove\n\n    let prettyFlags = ''\n\n    for (const flag in BITS) {\n      if (BITS[flag] & flags) {\n        prettyFlags += FLAGS[flag]\n      }\n    }\n\n    const fromAlgebraic = algebraic(from)\n    const toAlgebraic = algebraic(to)\n\n    const move: Move = {\n      color,\n      piece,\n      from: fromAlgebraic,\n      to: toAlgebraic,\n      san: this._moveToSan(uglyMove, this._moves({ legal: true })),\n      flags: prettyFlags,\n      lan: fromAlgebraic + toAlgebraic,\n    }\n\n    if (captured) {\n      move.captured = captured\n    }\n    if (promotion) {\n      move.promotion = promotion\n      move.lan += promotion\n    }\n\n    return move\n  }\n\n  turn() {\n    return this._turn\n  }\n\n  board() {\n    const output = []\n    let row = []\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i] == null) {\n        row.push(null)\n      } else {\n        row.push({\n          square: algebraic(i),\n          type: this._board[i].type,\n          color: this._board[i].color,\n        })\n      }\n      if ((i + 1) & 0x88) {\n        output.push(row)\n        row = []\n        i += 8\n      }\n    }\n\n    return output\n  }\n\n  squareColor(square: Square) {\n    if (square in Ox88) {\n      const sq = Ox88[square]\n      return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark'\n    }\n\n    return null\n  }\n\n  history(): string[]\n  history({ verbose }: { verbose: true }): (Move & { fen: string })[]\n  history({ verbose }: { verbose: false }): string[]\n  history({\n    verbose,\n  }: {\n    verbose: boolean\n  }): string[] | (Move & { fen: string })[]\n  history({ verbose = false }: { verbose?: boolean } = {}) {\n    const reversedHistory = []\n    const moveHistory = []\n\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    while (true) {\n      const move = reversedHistory.pop()\n      if (!move) {\n        break\n      }\n\n      if (verbose) {\n        moveHistory.push({ fen: this.fen(), ...this._makePretty(move) })\n      } else {\n        moveHistory.push(this._moveToSan(move, this._moves()))\n      }\n      this._makeMove(move)\n    }\n\n    return moveHistory\n  }\n\n  private _pruneComments() {\n    const reversedHistory = []\n    const currentComments: Record<string, string> = {}\n\n    const copyComment = (fen: string) => {\n      if (fen in this._comments) {\n        currentComments[fen] = this._comments[fen]\n      }\n    }\n\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    copyComment(this.fen())\n\n    while (true) {\n      const move = reversedHistory.pop()\n      if (!move) {\n        break\n      }\n      this._makeMove(move)\n      copyComment(this.fen())\n    }\n    this._comments = currentComments\n  }\n\n  getComment() {\n    return this._comments[this.fen()]\n  }\n\n  setComment(comment: string) {\n    this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']')\n  }\n\n  deleteComment() {\n    const comment = this._comments[this.fen()]\n    delete this._comments[this.fen()]\n    return comment\n  }\n\n  getComments() {\n    this._pruneComments()\n    return Object.keys(this._comments).map((fen: string) => {\n      return { fen: fen, comment: this._comments[fen] }\n    })\n  }\n\n  deleteComments() {\n    this._pruneComments()\n    return Object.keys(this._comments).map((fen) => {\n      const comment = this._comments[fen]\n      delete this._comments[fen]\n      return { fen: fen, comment: comment }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}