{"ast":null,"code":"let wasm;\nconst heap = new Array(128).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n  return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n  if (idx < 132) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\nconst cachedTextDecoder = new TextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nlet cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n  if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n  return cachedUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\nlet WASM_VECTOR_LEN = 0;\nconst cachedTextEncoder = new TextEncoder('utf-8');\nconst encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  const buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === undefined) {\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = malloc(buf.length);\n    getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n  }\n  let len = arg.length;\n  let ptr = malloc(len);\n  const mem = getUint8Memory0();\n  let offset = 0;\n  for (; offset < len; offset++) {\n    const code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    const ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\nlet cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n  if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n  return cachedInt32Memory0;\n}\n/**\n*/\nexport class Chess {\n  static __wrap(ptr) {\n    const obj = Object.create(Chess.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_chess_free(ptr);\n  }\n  /**\n  * @param {string} fen\n  */\n  constructor(fen) {\n    const ptr0 = passStringToWasm0(fen, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.chess_new(ptr0, len0);\n    return Chess.__wrap(ret);\n  }\n  /**\n  * @param {string} fen\n  */\n  load(fen) {\n    const ptr0 = passStringToWasm0(fen, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    wasm.chess_load(this.ptr, ptr0, len0);\n  }\n  /**\n  * @returns {BigUint64Array}\n  */\n  board() {\n    const ret = wasm.chess_board(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * @returns {string}\n  */\n  fen() {\n    try {\n      const ptr = this.__destroy_into_raw();\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.chess_fen(retptr, ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  */\n  static clear() {\n    wasm.chess_clear();\n  }\n}\nasync function load(module, imports) {\n  if (typeof Response === 'function' && module instanceof Response) {\n    if (typeof WebAssembly.instantiateStreaming === 'function') {\n      try {\n        return await WebAssembly.instantiateStreaming(module, imports);\n      } catch (e) {\n        if (module.headers.get('Content-Type') != 'application/wasm') {\n          console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n        } else {\n          throw e;\n        }\n      }\n    }\n    const bytes = await module.arrayBuffer();\n    return await WebAssembly.instantiate(bytes, imports);\n  } else {\n    const instance = await WebAssembly.instantiate(module, imports);\n    if (instance instanceof WebAssembly.Instance) {\n      return {\n        instance,\n        module\n      };\n    } else {\n      return instance;\n    }\n  }\n}\nfunction getImports() {\n  const imports = {};\n  imports.wbg = {};\n  imports.wbg.__wbindgen_object_drop_ref = function (arg0) {\n    takeObject(arg0);\n  };\n  imports.wbg.__wbg_buffer_cf65c07de34b9a08 = function (arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n  };\n  imports.wbg.__wbg_newwithbyteoffsetandlength_3198d2b31342a8de = function (arg0, arg1, arg2) {\n    const ret = new BigUint64Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n  };\n  imports.wbg.__wbg_new_416322ec526e82c1 = function (arg0) {\n    const ret = new BigUint64Array(getObject(arg0));\n    return addHeapObject(ret);\n  };\n  imports.wbg.__wbindgen_throw = function (arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n  };\n  imports.wbg.__wbindgen_memory = function () {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n  };\n  return imports;\n}\nfunction initMemory(imports, maybe_memory) {}\nfunction finalizeInit(instance, module) {\n  wasm = instance.exports;\n  init.__wbindgen_wasm_module = module;\n  cachedInt32Memory0 = null;\n  cachedUint8Memory0 = null;\n  return wasm;\n}\nfunction initSync(module) {\n  const imports = getImports();\n  initMemory(imports);\n  if (!(module instanceof WebAssembly.Module)) {\n    module = new WebAssembly.Module(module);\n  }\n  const instance = new WebAssembly.Instance(module, imports);\n  return finalizeInit(instance, module);\n}\nasync function init(input) {\n  if (typeof input === 'undefined') {\n    input = new URL('chess_wasm_bg.wasm', import.meta.url);\n  }\n  const imports = getImports();\n  if (typeof input === 'string' || typeof Request === 'function' && input instanceof Request || typeof URL === 'function' && input instanceof URL) {\n    input = fetch(input);\n  }\n  initMemory(imports);\n  const {\n    instance,\n    module\n  } = await load(await input, imports);\n  return finalizeInit(instance, module);\n}\nexport { initSync };\nexport default init;","map":{"version":3,"names":["wasm","heap","Array","fill","undefined","push","getObject","idx","heap_next","length","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","byteLength","Uint8Array","memory","buffer","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","cachedInt32Memory0","getInt32Memory0","Int32Array","Chess","__wrap","Object","create","prototype","__destroy_into_raw","free","__wbg_chess_free","constructor","fen","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","chess_new","load","chess_load","board","chess_board","retptr","__wbindgen_add_to_stack_pointer","chess_fen","r0","r1","__wbindgen_free","clear","chess_clear","module","imports","Response","WebAssembly","instantiateStreaming","e","headers","get","console","warn","bytes","arrayBuffer","instantiate","instance","Instance","getImports","wbg","__wbindgen_object_drop_ref","arg0","__wbg_buffer_cf65c07de34b9a08","__wbg_newwithbyteoffsetandlength_3198d2b31342a8de","arg1","arg2","BigUint64Array","__wbg_new_416322ec526e82c1","__wbindgen_throw","Error","__wbindgen_memory","initMemory","maybe_memory","finalizeInit","exports","init","__wbindgen_wasm_module","initSync","Module","input","URL","import","meta","url","Request","fetch"],"sources":["/home/jon/dev/chess-wasm/js/src/engine/chess_wasm.js"],"sourcesContent":["let wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n/**\n*/\nexport class Chess {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Chess.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_chess_free(ptr);\n    }\n    /**\n    * @param {string} fen\n    */\n    constructor(fen) {\n        const ptr0 = passStringToWasm0(fen, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.chess_new(ptr0, len0);\n        return Chess.__wrap(ret);\n    }\n    /**\n    * @param {string} fen\n    */\n    load(fen) {\n        const ptr0 = passStringToWasm0(fen, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.chess_load(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {BigUint64Array}\n    */\n    board() {\n        const ret = wasm.chess_board(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    fen() {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.chess_fen(retptr, ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    */\n    static clear() {\n        wasm.chess_clear();\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_buffer_cf65c07de34b9a08 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_3198d2b31342a8de = function(arg0, arg1, arg2) {\n        const ret = new BigUint64Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_416322ec526e82c1 = function(arg0) {\n        const ret = new BigUint64Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL('chess_wasm_bg.wasm', import.meta.url);\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\nexport { initSync }\nexport default init;\n"],"mappings":"AAAA,IAAIA,IAAI;AAER,MAAMC,IAAI,GAAG,IAAIC,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAACC,SAAS,CAAC;AAE3CH,IAAI,CAACI,IAAI,CAACD,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;AAEvC,SAASE,SAAS,CAACC,GAAG,EAAE;EAAE,OAAON,IAAI,CAACM,GAAG,CAAC;AAAE;AAE5C,IAAIC,SAAS,GAAGP,IAAI,CAACQ,MAAM;AAE3B,SAASC,UAAU,CAACH,GAAG,EAAE;EACrB,IAAIA,GAAG,GAAG,GAAG,EAAE;EACfN,IAAI,CAACM,GAAG,CAAC,GAAGC,SAAS;EACrBA,SAAS,GAAGD,GAAG;AACnB;AAEA,SAASI,UAAU,CAACJ,GAAG,EAAE;EACrB,MAAMK,GAAG,GAAGN,SAAS,CAACC,GAAG,CAAC;EAC1BG,UAAU,CAACH,GAAG,CAAC;EACf,OAAOK,GAAG;AACd;AAEA,MAAMC,iBAAiB,GAAG,IAAIC,WAAW,CAAC,OAAO,EAAE;EAAEC,SAAS,EAAE,IAAI;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAEpFH,iBAAiB,CAACI,MAAM,EAAE;AAE1B,IAAIC,kBAAkB,GAAG,IAAI;AAE7B,SAASC,eAAe,GAAG;EACvB,IAAID,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,CAACE,UAAU,KAAK,CAAC,EAAE;IACpEF,kBAAkB,GAAG,IAAIG,UAAU,CAACrB,IAAI,CAACsB,MAAM,CAACC,MAAM,CAAC;EAC3D;EACA,OAAOL,kBAAkB;AAC7B;AAEA,SAASM,kBAAkB,CAACC,GAAG,EAAEC,GAAG,EAAE;EAClC,OAAOb,iBAAiB,CAACI,MAAM,CAACE,eAAe,EAAE,CAACQ,QAAQ,CAACF,GAAG,EAAEA,GAAG,GAAGC,GAAG,CAAC,CAAC;AAC/E;AAEA,SAASE,aAAa,CAACC,GAAG,EAAE;EACxB,IAAIrB,SAAS,KAAKP,IAAI,CAACQ,MAAM,EAAER,IAAI,CAACI,IAAI,CAACJ,IAAI,CAACQ,MAAM,GAAG,CAAC,CAAC;EACzD,MAAMF,GAAG,GAAGC,SAAS;EACrBA,SAAS,GAAGP,IAAI,CAACM,GAAG,CAAC;EAErBN,IAAI,CAACM,GAAG,CAAC,GAAGsB,GAAG;EACf,OAAOtB,GAAG;AACd;AAEA,IAAIuB,eAAe,GAAG,CAAC;AAEvB,MAAMC,iBAAiB,GAAG,IAAIC,WAAW,CAAC,OAAO,CAAC;AAElD,MAAMC,YAAY,GAAI,OAAOF,iBAAiB,CAACG,UAAU,KAAK,UAAU,GAClE,UAAUC,GAAG,EAAEC,IAAI,EAAE;EACvB,OAAOL,iBAAiB,CAACG,UAAU,CAACC,GAAG,EAAEC,IAAI,CAAC;AAClD,CAAC,GACK,UAAUD,GAAG,EAAEC,IAAI,EAAE;EACvB,MAAMC,GAAG,GAAGN,iBAAiB,CAACO,MAAM,CAACH,GAAG,CAAC;EACzCC,IAAI,CAACG,GAAG,CAACF,GAAG,CAAC;EACb,OAAO;IACHG,IAAI,EAAEL,GAAG,CAAC1B,MAAM;IAChBgC,OAAO,EAAEJ,GAAG,CAAC5B;EACjB,CAAC;AACL,CAAE;AAEF,SAASiC,iBAAiB,CAACP,GAAG,EAAEQ,MAAM,EAAEC,OAAO,EAAE;EAE7C,IAAIA,OAAO,KAAKxC,SAAS,EAAE;IACvB,MAAMiC,GAAG,GAAGN,iBAAiB,CAACO,MAAM,CAACH,GAAG,CAAC;IACzC,MAAMV,GAAG,GAAGkB,MAAM,CAACN,GAAG,CAAC5B,MAAM,CAAC;IAC9BU,eAAe,EAAE,CAACQ,QAAQ,CAACF,GAAG,EAAEA,GAAG,GAAGY,GAAG,CAAC5B,MAAM,CAAC,CAAC8B,GAAG,CAACF,GAAG,CAAC;IAC1DP,eAAe,GAAGO,GAAG,CAAC5B,MAAM;IAC5B,OAAOgB,GAAG;EACd;EAEA,IAAIC,GAAG,GAAGS,GAAG,CAAC1B,MAAM;EACpB,IAAIgB,GAAG,GAAGkB,MAAM,CAACjB,GAAG,CAAC;EAErB,MAAMmB,GAAG,GAAG1B,eAAe,EAAE;EAE7B,IAAI2B,MAAM,GAAG,CAAC;EAEd,OAAOA,MAAM,GAAGpB,GAAG,EAAEoB,MAAM,EAAE,EAAE;IAC3B,MAAMC,IAAI,GAAGZ,GAAG,CAACa,UAAU,CAACF,MAAM,CAAC;IACnC,IAAIC,IAAI,GAAG,IAAI,EAAE;IACjBF,GAAG,CAACpB,GAAG,GAAGqB,MAAM,CAAC,GAAGC,IAAI;EAC5B;EAEA,IAAID,MAAM,KAAKpB,GAAG,EAAE;IAChB,IAAIoB,MAAM,KAAK,CAAC,EAAE;MACdX,GAAG,GAAGA,GAAG,CAACc,KAAK,CAACH,MAAM,CAAC;IAC3B;IACArB,GAAG,GAAGmB,OAAO,CAACnB,GAAG,EAAEC,GAAG,EAAEA,GAAG,GAAGoB,MAAM,GAAGX,GAAG,CAAC1B,MAAM,GAAG,CAAC,CAAC;IACtD,MAAM2B,IAAI,GAAGjB,eAAe,EAAE,CAACQ,QAAQ,CAACF,GAAG,GAAGqB,MAAM,EAAErB,GAAG,GAAGC,GAAG,CAAC;IAChE,MAAMd,GAAG,GAAGqB,YAAY,CAACE,GAAG,EAAEC,IAAI,CAAC;IAEnCU,MAAM,IAAIlC,GAAG,CAAC6B,OAAO;EACzB;EAEAX,eAAe,GAAGgB,MAAM;EACxB,OAAOrB,GAAG;AACd;AAEA,IAAIyB,kBAAkB,GAAG,IAAI;AAE7B,SAASC,eAAe,GAAG;EACvB,IAAID,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,CAAC9B,UAAU,KAAK,CAAC,EAAE;IACpE8B,kBAAkB,GAAG,IAAIE,UAAU,CAACpD,IAAI,CAACsB,MAAM,CAACC,MAAM,CAAC;EAC3D;EACA,OAAO2B,kBAAkB;AAC7B;AACA;AACA;AACA,OAAO,MAAMG,KAAK,CAAC;EAEf,OAAOC,MAAM,CAAC7B,GAAG,EAAE;IACf,MAAMI,GAAG,GAAG0B,MAAM,CAACC,MAAM,CAACH,KAAK,CAACI,SAAS,CAAC;IAC1C5B,GAAG,CAACJ,GAAG,GAAGA,GAAG;IAEb,OAAOI,GAAG;EACd;EAEA6B,kBAAkB,GAAG;IACjB,MAAMjC,GAAG,GAAG,IAAI,CAACA,GAAG;IACpB,IAAI,CAACA,GAAG,GAAG,CAAC;IAEZ,OAAOA,GAAG;EACd;EAEAkC,IAAI,GAAG;IACH,MAAMlC,GAAG,GAAG,IAAI,CAACiC,kBAAkB,EAAE;IACrC1D,IAAI,CAAC4D,gBAAgB,CAACnC,GAAG,CAAC;EAC9B;EACA;AACJ;AACA;EACIoC,WAAW,CAACC,GAAG,EAAE;IACb,MAAMC,IAAI,GAAGrB,iBAAiB,CAACoB,GAAG,EAAE9D,IAAI,CAACgE,iBAAiB,EAAEhE,IAAI,CAACiE,kBAAkB,CAAC;IACpF,MAAMC,IAAI,GAAGpC,eAAe;IAC5B,MAAMlB,GAAG,GAAGZ,IAAI,CAACmE,SAAS,CAACJ,IAAI,EAAEG,IAAI,CAAC;IACtC,OAAOb,KAAK,CAACC,MAAM,CAAC1C,GAAG,CAAC;EAC5B;EACA;AACJ;AACA;EACIwD,IAAI,CAACN,GAAG,EAAE;IACN,MAAMC,IAAI,GAAGrB,iBAAiB,CAACoB,GAAG,EAAE9D,IAAI,CAACgE,iBAAiB,EAAEhE,IAAI,CAACiE,kBAAkB,CAAC;IACpF,MAAMC,IAAI,GAAGpC,eAAe;IAC5B9B,IAAI,CAACqE,UAAU,CAAC,IAAI,CAAC5C,GAAG,EAAEsC,IAAI,EAAEG,IAAI,CAAC;EACzC;EACA;AACJ;AACA;EACII,KAAK,GAAG;IACJ,MAAM1D,GAAG,GAAGZ,IAAI,CAACuE,WAAW,CAAC,IAAI,CAAC9C,GAAG,CAAC;IACtC,OAAOd,UAAU,CAACC,GAAG,CAAC;EAC1B;EACA;AACJ;AACA;EACIkD,GAAG,GAAG;IACF,IAAI;MACA,MAAMrC,GAAG,GAAG,IAAI,CAACiC,kBAAkB,EAAE;MACrC,MAAMc,MAAM,GAAGxE,IAAI,CAACyE,+BAA+B,CAAC,CAAC,EAAE,CAAC;MACxDzE,IAAI,CAAC0E,SAAS,CAACF,MAAM,EAAE/C,GAAG,CAAC;MAC3B,IAAIkD,EAAE,GAAGxB,eAAe,EAAE,CAACqB,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;MAC1C,IAAII,EAAE,GAAGzB,eAAe,EAAE,CAACqB,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;MAC1C,OAAOhD,kBAAkB,CAACmD,EAAE,EAAEC,EAAE,CAAC;IACrC,CAAC,SAAS;MACN5E,IAAI,CAACyE,+BAA+B,CAAC,EAAE,CAAC;MACxCzE,IAAI,CAAC6E,eAAe,CAACF,EAAE,EAAEC,EAAE,CAAC;IAChC;EACJ;EACA;AACJ;EACI,OAAOE,KAAK,GAAG;IACX9E,IAAI,CAAC+E,WAAW,EAAE;EACtB;AACJ;AAEA,eAAeX,IAAI,CAACY,MAAM,EAAEC,OAAO,EAAE;EACjC,IAAI,OAAOC,QAAQ,KAAK,UAAU,IAAIF,MAAM,YAAYE,QAAQ,EAAE;IAC9D,IAAI,OAAOC,WAAW,CAACC,oBAAoB,KAAK,UAAU,EAAE;MACxD,IAAI;QACA,OAAO,MAAMD,WAAW,CAACC,oBAAoB,CAACJ,MAAM,EAAEC,OAAO,CAAC;MAElE,CAAC,CAAC,OAAOI,CAAC,EAAE;QACR,IAAIL,MAAM,CAACM,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,IAAI,kBAAkB,EAAE;UAC1DC,OAAO,CAACC,IAAI,CAAC,mMAAmM,EAAEJ,CAAC,CAAC;QAExN,CAAC,MAAM;UACH,MAAMA,CAAC;QACX;MACJ;IACJ;IAEA,MAAMK,KAAK,GAAG,MAAMV,MAAM,CAACW,WAAW,EAAE;IACxC,OAAO,MAAMR,WAAW,CAACS,WAAW,CAACF,KAAK,EAAET,OAAO,CAAC;EAExD,CAAC,MAAM;IACH,MAAMY,QAAQ,GAAG,MAAMV,WAAW,CAACS,WAAW,CAACZ,MAAM,EAAEC,OAAO,CAAC;IAE/D,IAAIY,QAAQ,YAAYV,WAAW,CAACW,QAAQ,EAAE;MAC1C,OAAO;QAAED,QAAQ;QAAEb;MAAO,CAAC;IAE/B,CAAC,MAAM;MACH,OAAOa,QAAQ;IACnB;EACJ;AACJ;AAEA,SAASE,UAAU,GAAG;EAClB,MAAMd,OAAO,GAAG,CAAC,CAAC;EAClBA,OAAO,CAACe,GAAG,GAAG,CAAC,CAAC;EAChBf,OAAO,CAACe,GAAG,CAACC,0BAA0B,GAAG,UAASC,IAAI,EAAE;IACpDvF,UAAU,CAACuF,IAAI,CAAC;EACpB,CAAC;EACDjB,OAAO,CAACe,GAAG,CAACG,6BAA6B,GAAG,UAASD,IAAI,EAAE;IACvD,MAAMtF,GAAG,GAAGN,SAAS,CAAC4F,IAAI,CAAC,CAAC3E,MAAM;IAClC,OAAOK,aAAa,CAAChB,GAAG,CAAC;EAC7B,CAAC;EACDqE,OAAO,CAACe,GAAG,CAACI,iDAAiD,GAAG,UAASF,IAAI,EAAEG,IAAI,EAAEC,IAAI,EAAE;IACvF,MAAM1F,GAAG,GAAG,IAAI2F,cAAc,CAACjG,SAAS,CAAC4F,IAAI,CAAC,EAAEG,IAAI,KAAK,CAAC,EAAEC,IAAI,KAAK,CAAC,CAAC;IACvE,OAAO1E,aAAa,CAAChB,GAAG,CAAC;EAC7B,CAAC;EACDqE,OAAO,CAACe,GAAG,CAACQ,0BAA0B,GAAG,UAASN,IAAI,EAAE;IACpD,MAAMtF,GAAG,GAAG,IAAI2F,cAAc,CAACjG,SAAS,CAAC4F,IAAI,CAAC,CAAC;IAC/C,OAAOtE,aAAa,CAAChB,GAAG,CAAC;EAC7B,CAAC;EACDqE,OAAO,CAACe,GAAG,CAACS,gBAAgB,GAAG,UAASP,IAAI,EAAEG,IAAI,EAAE;IAChD,MAAM,IAAIK,KAAK,CAAClF,kBAAkB,CAAC0E,IAAI,EAAEG,IAAI,CAAC,CAAC;EACnD,CAAC;EACDpB,OAAO,CAACe,GAAG,CAACW,iBAAiB,GAAG,YAAW;IACvC,MAAM/F,GAAG,GAAGZ,IAAI,CAACsB,MAAM;IACvB,OAAOM,aAAa,CAAChB,GAAG,CAAC;EAC7B,CAAC;EAED,OAAOqE,OAAO;AAClB;AAEA,SAAS2B,UAAU,CAAC3B,OAAO,EAAE4B,YAAY,EAAE,CAE3C;AAEA,SAASC,YAAY,CAACjB,QAAQ,EAAEb,MAAM,EAAE;EACpChF,IAAI,GAAG6F,QAAQ,CAACkB,OAAO;EACvBC,IAAI,CAACC,sBAAsB,GAAGjC,MAAM;EACpC9B,kBAAkB,GAAG,IAAI;EACzBhC,kBAAkB,GAAG,IAAI;EAGzB,OAAOlB,IAAI;AACf;AAEA,SAASkH,QAAQ,CAAClC,MAAM,EAAE;EACtB,MAAMC,OAAO,GAAGc,UAAU,EAAE;EAE5Ba,UAAU,CAAC3B,OAAO,CAAC;EAEnB,IAAI,EAAED,MAAM,YAAYG,WAAW,CAACgC,MAAM,CAAC,EAAE;IACzCnC,MAAM,GAAG,IAAIG,WAAW,CAACgC,MAAM,CAACnC,MAAM,CAAC;EAC3C;EAEA,MAAMa,QAAQ,GAAG,IAAIV,WAAW,CAACW,QAAQ,CAACd,MAAM,EAAEC,OAAO,CAAC;EAE1D,OAAO6B,YAAY,CAACjB,QAAQ,EAAEb,MAAM,CAAC;AACzC;AAEA,eAAegC,IAAI,CAACI,KAAK,EAAE;EACvB,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;IAC9BA,KAAK,GAAG,IAAIC,GAAG,CAAC,oBAAoB,EAAEC,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;EAC1D;EACA,MAAMvC,OAAO,GAAGc,UAAU,EAAE;EAE5B,IAAI,OAAOqB,KAAK,KAAK,QAAQ,IAAK,OAAOK,OAAO,KAAK,UAAU,IAAIL,KAAK,YAAYK,OAAQ,IAAK,OAAOJ,GAAG,KAAK,UAAU,IAAID,KAAK,YAAYC,GAAI,EAAE;IACjJD,KAAK,GAAGM,KAAK,CAACN,KAAK,CAAC;EACxB;EAEAR,UAAU,CAAC3B,OAAO,CAAC;EAEnB,MAAM;IAAEY,QAAQ;IAAEb;EAAO,CAAC,GAAG,MAAMZ,IAAI,CAAC,MAAMgD,KAAK,EAAEnC,OAAO,CAAC;EAE7D,OAAO6B,YAAY,CAACjB,QAAQ,EAAEb,MAAM,CAAC;AACzC;AAEA,SAASkC,QAAQ;AACjB,eAAeF,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}