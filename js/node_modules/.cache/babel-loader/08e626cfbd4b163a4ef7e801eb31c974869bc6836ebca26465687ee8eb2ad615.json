{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/jon/dev/shallow_blue/test/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/jon/dev/shallow_blue/test/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/jon/dev/shallow_blue/test/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright (c) 2023, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nexport var WHITE = 'w';\nexport var BLACK = 'b';\nexport var PAWN = 'p';\nexport var KNIGHT = 'n';\nexport var BISHOP = 'b';\nexport var ROOK = 'r';\nexport var QUEEN = 'q';\nexport var KING = 'k';\nexport var DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\nvar EMPTY = -1;\nvar FLAGS = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q'\n};\n// prettier-ignore\nexport var SQUARES = ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', 'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', 'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', 'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', 'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', 'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', 'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', 'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'];\nvar BITS = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64\n};\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n// prettier-ignore\n// eslint-disable-next-line\nvar Ox88 = {\n  a8: 0,\n  b8: 1,\n  c8: 2,\n  d8: 3,\n  e8: 4,\n  f8: 5,\n  g8: 6,\n  h8: 7,\n  a7: 16,\n  b7: 17,\n  c7: 18,\n  d7: 19,\n  e7: 20,\n  f7: 21,\n  g7: 22,\n  h7: 23,\n  a6: 32,\n  b6: 33,\n  c6: 34,\n  d6: 35,\n  e6: 36,\n  f6: 37,\n  g6: 38,\n  h6: 39,\n  a5: 48,\n  b5: 49,\n  c5: 50,\n  d5: 51,\n  e5: 52,\n  f5: 53,\n  g5: 54,\n  h5: 55,\n  a4: 64,\n  b4: 65,\n  c4: 66,\n  d4: 67,\n  e4: 68,\n  f4: 69,\n  g4: 70,\n  h4: 71,\n  a3: 80,\n  b3: 81,\n  c3: 82,\n  d3: 83,\n  e3: 84,\n  f3: 85,\n  g3: 86,\n  h3: 87,\n  a2: 96,\n  b2: 97,\n  c2: 98,\n  d2: 99,\n  e2: 100,\n  f2: 101,\n  g2: 102,\n  h2: 103,\n  a1: 112,\n  b1: 113,\n  c1: 114,\n  d1: 115,\n  e1: 116,\n  f1: 117,\n  g1: 118,\n  h1: 119\n};\nvar PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15]\n};\nvar PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1]\n};\n// prettier-ignore\nvar ATTACKS = [20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20];\n// prettier-ignore\nvar RAYS = [17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0, 0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0, -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17];\nvar PIECE_MASKS = {\n  p: 0x1,\n  n: 0x2,\n  b: 0x4,\n  r: 0x8,\n  q: 0x10,\n  k: 0x20\n};\nvar SYMBOLS = 'pnbrqkPNBRQK';\nvar PROMOTIONS = [KNIGHT, BISHOP, ROOK, QUEEN];\nvar RANK_1 = 7;\nvar RANK_2 = 6;\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nvar RANK_7 = 1;\nvar RANK_8 = 0;\nvar ROOKS = {\n  w: [{\n    square: Ox88.a1,\n    flag: BITS.QSIDE_CASTLE\n  }, {\n    square: Ox88.h1,\n    flag: BITS.KSIDE_CASTLE\n  }],\n  b: [{\n    square: Ox88.a8,\n    flag: BITS.QSIDE_CASTLE\n  }, {\n    square: Ox88.h8,\n    flag: BITS.KSIDE_CASTLE\n  }]\n};\nvar SECOND_RANK = {\n  b: RANK_7,\n  w: RANK_2\n};\nvar TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*'];\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square) {\n  return square >> 4;\n}\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square) {\n  return square & 0xf;\n}\nfunction isDigit(c) {\n  return '0123456789'.indexOf(c) !== -1;\n}\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square) {\n  var f = file(square);\n  var r = rank(square);\n  return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1);\n}\nfunction swapColor(color) {\n  return color === WHITE ? BLACK : WHITE;\n}\nexport function validateFen(fen) {\n  // 1st criterion: 6 space-seperated fields?\n  var tokens = fen.split(/\\s+/);\n  if (tokens.length !== 6) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: must contain six space-delimited fields'\n    };\n  }\n  // 2nd criterion: move number field is a integer value > 0?\n  var moveNumber = parseInt(tokens[5], 10);\n  if (isNaN(moveNumber) || moveNumber <= 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: move number must be a positive integer'\n    };\n  }\n  // 3rd criterion: half move counter is an integer >= 0?\n  var halfMoves = parseInt(tokens[4], 10);\n  if (isNaN(halfMoves) || halfMoves < 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: half move counter number must be a non-negative integer'\n    };\n  }\n  // 4th criterion: 4th field is a valid e.p.-string?\n  if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: en-passant square is invalid'\n    };\n  }\n  // 5th criterion: 3th field is a valid castle-string?\n  if (/[^kKqQ-]/.test(tokens[2])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: castling availability is invalid'\n    };\n  }\n  // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n  if (!/^(w|b)$/.test(tokens[1])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: side-to-move is invalid'\n    };\n  }\n  // 7th criterion: 1st field contains 8 rows?\n  var rows = tokens[0].split('/');\n  if (rows.length !== 8) {\n    return {\n      ok: false,\n      error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\"\n    };\n  }\n  // 8th criterion: every row is valid?\n  for (var i = 0; i < rows.length; i++) {\n    // check for right sum of fields AND not two numbers in succession\n    var sumFields = 0;\n    var previousWasNumber = false;\n    for (var k = 0; k < rows[i].length; k++) {\n      if (isDigit(rows[i][k])) {\n        if (previousWasNumber) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (consecutive number)'\n          };\n        }\n        sumFields += parseInt(rows[i][k], 10);\n        previousWasNumber = true;\n      } else {\n        if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (invalid piece)'\n          };\n        }\n        sumFields += 1;\n        previousWasNumber = false;\n      }\n    }\n    if (sumFields !== 8) {\n      return {\n        ok: false,\n        error: 'Invalid FEN: piece data is invalid (too many squares in rank)'\n      };\n    }\n  }\n  if (tokens[3][1] == '3' && tokens[1] == 'w' || tokens[3][1] == '6' && tokens[1] == 'b') {\n    return {\n      ok: false,\n      error: 'Invalid FEN: illegal en-passant square'\n    };\n  }\n  var kings = [{\n    color: 'white',\n    regex: /K/g\n  }, {\n    color: 'black',\n    regex: /k/g\n  }];\n  for (var _i = 0, _kings = kings; _i < _kings.length; _i++) {\n    var _kings$_i = _kings[_i],\n      color = _kings$_i.color,\n      regex = _kings$_i.regex;\n    if (!regex.test(tokens[0])) {\n      return {\n        ok: false,\n        error: \"Invalid FEN: missing \".concat(color, \" king\")\n      };\n    }\n    if ((tokens[0].match(regex) || []).length > 1) {\n      return {\n        ok: false,\n        error: \"Invalid FEN: too many \".concat(color, \" kings\")\n      };\n    }\n  }\n  return {\n    ok: true\n  };\n}\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move, moves) {\n  var from = move.from;\n  var to = move.to;\n  var piece = move.piece;\n  var ambiguities = 0;\n  var sameRank = 0;\n  var sameFile = 0;\n  for (var i = 0, len = moves.length; i < len; i++) {\n    var ambigFrom = moves[i].from;\n    var ambigTo = moves[i].to;\n    var ambigPiece = moves[i].piece;\n    /*\n     * if a move of the same piece type ends on the same to square, we'll need\n     * to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n      ambiguities++;\n      if (rank(from) === rank(ambigFrom)) {\n        sameRank++;\n      }\n      if (file(from) === file(ambigFrom)) {\n        sameFile++;\n      }\n    }\n  }\n  if (ambiguities > 0) {\n    if (sameRank > 0 && sameFile > 0) {\n      /*\n       * if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      return algebraic(from);\n    } else if (sameFile > 0) {\n      /*\n       * if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1);\n    } else {\n      // else use the file symbol\n      return algebraic(from).charAt(0);\n    }\n  }\n  return '';\n}\nfunction addMove(moves, color, from, to, piece) {\n  var captured = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;\n  var flags = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : BITS.NORMAL;\n  var r = rank(to);\n  if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n    for (var i = 0; i < PROMOTIONS.length; i++) {\n      var promotion = PROMOTIONS[i];\n      moves.push({\n        color: color,\n        from: from,\n        to: to,\n        piece: piece,\n        captured: captured,\n        promotion: promotion,\n        flags: flags | BITS.PROMOTION\n      });\n    }\n  } else {\n    moves.push({\n      color: color,\n      from: from,\n      to: to,\n      piece: piece,\n      captured: captured,\n      flags: flags\n    });\n  }\n}\nfunction inferPieceType(san) {\n  var pieceType = san.charAt(0);\n  if (pieceType >= 'a' && pieceType <= 'h') {\n    var matches = san.match(/[a-h]\\d.*[a-h]\\d/);\n    if (matches) {\n      return undefined;\n    }\n    return PAWN;\n  }\n  pieceType = pieceType.toLowerCase();\n  if (pieceType === 'o') {\n    return KING;\n  }\n  return pieceType;\n}\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move) {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n}\nexport var Chess = /*#__PURE__*/function () {\n  function Chess() {\n    var fen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_POSITION;\n    _classCallCheck(this, Chess);\n    this._board = new Array(128);\n    this._turn = WHITE;\n    this._header = {};\n    this._kings = {\n      w: EMPTY,\n      b: EMPTY\n    };\n    this._epSquare = -1;\n    this._halfMoves = 0;\n    this._moveNumber = 0;\n    this._history = [];\n    this._comments = {};\n    this._castling = {\n      w: 0,\n      b: 0\n    };\n    this.load(fen);\n  }\n  _createClass(Chess, [{\n    key: \"clear\",\n    value: function clear() {\n      var keepHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this._board = new Array(128);\n      this._kings = {\n        w: EMPTY,\n        b: EMPTY\n      };\n      this._turn = WHITE;\n      this._castling = {\n        w: 0,\n        b: 0\n      };\n      this._epSquare = EMPTY;\n      this._halfMoves = 0;\n      this._moveNumber = 1;\n      this._history = [];\n      this._comments = {};\n      this._header = keepHeaders ? this._header : {};\n      this._updateSetup(this.fen());\n    }\n  }, {\n    key: \"load\",\n    value: function load(fen) {\n      var keepHeaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var tokens = fen.split(/\\s+/);\n      // append commonly omitted fen tokens\n      if (tokens.length >= 2 && tokens.length < 6) {\n        var adjustments = ['-', '-', '0', '1'];\n        fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ');\n      }\n      tokens = fen.split(/\\s+/);\n      var _validateFen = validateFen(fen),\n        ok = _validateFen.ok,\n        error = _validateFen.error;\n      if (!ok) {\n        throw new Error(error);\n      }\n      var position = tokens[0];\n      var square = 0;\n      this.clear(keepHeaders);\n      for (var i = 0; i < position.length; i++) {\n        var piece = position.charAt(i);\n        if (piece === '/') {\n          square += 8;\n        } else if (isDigit(piece)) {\n          square += parseInt(piece, 10);\n        } else {\n          var color = piece < 'a' ? WHITE : BLACK;\n          this.put({\n            type: piece.toLowerCase(),\n            color: color\n          }, algebraic(square));\n          square++;\n        }\n      }\n      this._turn = tokens[1];\n      if (tokens[2].indexOf('K') > -1) {\n        this._castling.w |= BITS.KSIDE_CASTLE;\n      }\n      if (tokens[2].indexOf('Q') > -1) {\n        this._castling.w |= BITS.QSIDE_CASTLE;\n      }\n      if (tokens[2].indexOf('k') > -1) {\n        this._castling.b |= BITS.KSIDE_CASTLE;\n      }\n      if (tokens[2].indexOf('q') > -1) {\n        this._castling.b |= BITS.QSIDE_CASTLE;\n      }\n      this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3]];\n      this._halfMoves = parseInt(tokens[4], 10);\n      this._moveNumber = parseInt(tokens[5], 10);\n      this._updateSetup(this.fen());\n    }\n  }, {\n    key: \"fen\",\n    value: function fen() {\n      var _a, _b;\n      var empty = 0;\n      var fen = '';\n      for (var i = Ox88.a8; i <= Ox88.h1; i++) {\n        if (this._board[i]) {\n          if (empty > 0) {\n            fen += empty;\n            empty = 0;\n          }\n          var _this$_board$i = this._board[i],\n            color = _this$_board$i.color,\n            piece = _this$_board$i.type;\n          fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n        } else {\n          empty++;\n        }\n        if (i + 1 & 0x88) {\n          if (empty > 0) {\n            fen += empty;\n          }\n          if (i !== Ox88.h1) {\n            fen += '/';\n          }\n          empty = 0;\n          i += 8;\n        }\n      }\n      var castling = '';\n      if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n        castling += 'K';\n      }\n      if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n        castling += 'Q';\n      }\n      if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n        castling += 'k';\n      }\n      if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n        castling += 'q';\n      }\n      // do we have an empty castling flag?\n      castling = castling || '-';\n      var epSquare = '-';\n      /*\n       * only print the ep square if en passant is a valid move (pawn is present\n       * and ep capture is not pinned)\n       */\n      if (this._epSquare !== EMPTY) {\n        var bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n        var squares = [bigPawnSquare + 1, bigPawnSquare - 1];\n        for (var _i2 = 0, _squares = squares; _i2 < _squares.length; _i2++) {\n          var square = _squares[_i2];\n          // is the square off the board?\n          if (square & 0x88) {\n            continue;\n          }\n          var _color = this._turn;\n          // is there a pawn that can capture the epSquare?\n          if (((_a = this._board[square]) === null || _a === void 0 ? void 0 : _a.color) === _color && ((_b = this._board[square]) === null || _b === void 0 ? void 0 : _b.type) === PAWN) {\n            // if the pawn makes an ep capture, does it leave it's king in check?\n            this._makeMove({\n              color: _color,\n              from: square,\n              to: this._epSquare,\n              piece: PAWN,\n              captured: PAWN,\n              flags: BITS.EP_CAPTURE\n            });\n            var isLegal = !this._isKingAttacked(_color);\n            this._undoMove();\n            // if ep is legal, break and set the ep square in the FEN output\n            if (isLegal) {\n              epSquare = algebraic(this._epSquare);\n              break;\n            }\n          }\n        }\n      }\n      return [fen, this._turn, castling, epSquare, this._halfMoves, this._moveNumber].join(' ');\n    }\n    /*\n     * Called when the initial board setup is changed with put() or remove().\n     * modifies the SetUp and FEN properties of the header object. If the FEN\n     * is equal to the default position, the SetUp and FEN are deleted the setup\n     * is only updated if history.length is zero, ie moves haven't been made.\n     */\n  }, {\n    key: \"_updateSetup\",\n    value: function _updateSetup(fen) {\n      if (this._history.length > 0) return;\n      if (fen !== DEFAULT_POSITION) {\n        this._header['SetUp'] = '1';\n        this._header['FEN'] = fen;\n      } else {\n        delete this._header['SetUp'];\n        delete this._header['FEN'];\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.load(DEFAULT_POSITION);\n    }\n  }, {\n    key: \"get\",\n    value: function get(square) {\n      return this._board[Ox88[square]] || false;\n    }\n  }, {\n    key: \"put\",\n    value: function put(_ref, square) {\n      var type = _ref.type,\n        color = _ref.color;\n      // check for piece\n      if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n        return false;\n      }\n      // check for valid square\n      if (!(square in Ox88)) {\n        return false;\n      }\n      var sq = Ox88[square];\n      // don't let the user place more than one king\n      if (type == KING && !(this._kings[color] == EMPTY || this._kings[color] == sq)) {\n        return false;\n      }\n      this._board[sq] = {\n        type: type,\n        color: color\n      };\n      if (type === KING) {\n        this._kings[color] = sq;\n      }\n      this._updateSetup(this.fen());\n      return true;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(square) {\n      var piece = this.get(square);\n      delete this._board[Ox88[square]];\n      if (piece && piece.type === KING) {\n        this._kings[piece.color] = EMPTY;\n      }\n      this._updateSetup(this.fen());\n      return piece;\n    }\n  }, {\n    key: \"_attacked\",\n    value: function _attacked(color, square) {\n      for (var i = Ox88.a8; i <= Ox88.h1; i++) {\n        // did we run off the end of the board\n        if (i & 0x88) {\n          i += 7;\n          continue;\n        }\n        // if empty square or wrong color\n        if (this._board[i] === undefined || this._board[i].color !== color) {\n          continue;\n        }\n        var piece = this._board[i];\n        var difference = i - square;\n        // skip - to/from square are the same\n        if (difference === 0) {\n          continue;\n        }\n        var index = difference + 119;\n        if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n          if (piece.type === PAWN) {\n            if (difference > 0) {\n              if (piece.color === WHITE) return true;\n            } else {\n              if (piece.color === BLACK) return true;\n            }\n            continue;\n          }\n          // if the piece is a knight or a king\n          if (piece.type === 'n' || piece.type === 'k') return true;\n          var offset = RAYS[index];\n          var j = i + offset;\n          var blocked = false;\n          while (j !== square) {\n            if (this._board[j] != null) {\n              blocked = true;\n              break;\n            }\n            j += offset;\n          }\n          if (!blocked) return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"_isKingAttacked\",\n    value: function _isKingAttacked(color) {\n      return this._attacked(swapColor(color), this._kings[color]);\n    }\n  }, {\n    key: \"isAttacked\",\n    value: function isAttacked(square, attackedBy) {\n      return this._attacked(attackedBy, Ox88[square]);\n    }\n  }, {\n    key: \"isCheck\",\n    value: function isCheck() {\n      return this._isKingAttacked(this._turn);\n    }\n  }, {\n    key: \"inCheck\",\n    value: function inCheck() {\n      return this.isCheck();\n    }\n  }, {\n    key: \"isCheckmate\",\n    value: function isCheckmate() {\n      return this.isCheck() && this._moves().length === 0;\n    }\n  }, {\n    key: \"isStalemate\",\n    value: function isStalemate() {\n      return !this.isCheck() && this._moves().length === 0;\n    }\n  }, {\n    key: \"isInsufficientMaterial\",\n    value: function isInsufficientMaterial() {\n      /*\n       * k.b. vs k.b. (of opposite colors) with mate in 1:\n       * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n       *\n       * k.b. vs k.n. with mate in 1:\n       * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n       */\n      var pieces = {\n        b: 0,\n        n: 0,\n        r: 0,\n        q: 0,\n        k: 0,\n        p: 0\n      };\n      var bishops = [];\n      var numPieces = 0;\n      var squareColor = 0;\n      for (var i = Ox88.a8; i <= Ox88.h1; i++) {\n        squareColor = (squareColor + 1) % 2;\n        if (i & 0x88) {\n          i += 7;\n          continue;\n        }\n        var piece = this._board[i];\n        if (piece) {\n          pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n          if (piece.type === BISHOP) {\n            bishops.push(squareColor);\n          }\n          numPieces++;\n        }\n      }\n      // k vs. k\n      if (numPieces === 2) {\n        return true;\n      } else if (\n      // k vs. kn .... or .... k vs. kb\n      numPieces === 3 && (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n        return true;\n      } else if (numPieces === pieces[BISHOP] + 2) {\n        // kb vs. kb where any number of bishops are all on the same color\n        var sum = 0;\n        var len = bishops.length;\n        for (var _i3 = 0; _i3 < len; _i3++) {\n          sum += bishops[_i3];\n        }\n        if (sum === 0 || sum === len) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"isThreefoldRepetition\",\n    value: function isThreefoldRepetition() {\n      var moves = [];\n      var positions = {};\n      var repetition = false;\n      while (true) {\n        var move = this._undoMove();\n        if (!move) break;\n        moves.push(move);\n      }\n      while (true) {\n        /*\n         * remove the last two fields in the FEN string, they're not needed when\n         * checking for draw by rep\n         */\n        var fen = this.fen().split(' ').slice(0, 4).join(' ');\n        // has the position occurred three or move times\n        positions[fen] = fen in positions ? positions[fen] + 1 : 1;\n        if (positions[fen] >= 3) {\n          repetition = true;\n        }\n        var _move2 = moves.pop();\n        if (!_move2) {\n          break;\n        } else {\n          this._makeMove(_move2);\n        }\n      }\n      return repetition;\n    }\n  }, {\n    key: \"isDraw\",\n    value: function isDraw() {\n      return this._halfMoves >= 100 ||\n      // 50 moves per side = 100 half moves\n      this.isStalemate() || this.isInsufficientMaterial() || this.isThreefoldRepetition();\n    }\n  }, {\n    key: \"isGameOver\",\n    value: function isGameOver() {\n      return this.isCheckmate() || this.isStalemate() || this.isDraw();\n    }\n  }, {\n    key: \"moves\",\n    value: function moves() {\n      var _this = this;\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$verbose = _ref2.verbose,\n        verbose = _ref2$verbose === void 0 ? false : _ref2$verbose,\n        _ref2$square = _ref2.square,\n        square = _ref2$square === void 0 ? undefined : _ref2$square;\n      var moves = this._moves({\n        square: square\n      });\n      if (verbose) {\n        return moves.map(function (move) {\n          return _this._makePretty(move);\n        });\n      } else {\n        return moves.map(function (move) {\n          return _this._moveToSan(move, moves);\n        });\n      }\n    }\n  }, {\n    key: \"_moves\",\n    value: function _moves() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$legal = _ref3.legal,\n        legal = _ref3$legal === void 0 ? true : _ref3$legal,\n        _ref3$piece = _ref3.piece,\n        piece = _ref3$piece === void 0 ? undefined : _ref3$piece,\n        _ref3$square = _ref3.square,\n        square = _ref3$square === void 0 ? undefined : _ref3$square;\n      var _a;\n      var forSquare = square ? square.toLowerCase() : undefined;\n      var forPiece = piece === null || piece === void 0 ? void 0 : piece.toLowerCase();\n      var moves = [];\n      var us = this._turn;\n      var them = swapColor(us);\n      var firstSquare = Ox88.a8;\n      var lastSquare = Ox88.h1;\n      var singleSquare = false;\n      // are we generating moves for a single square?\n      if (forSquare) {\n        // illegal square, return empty moves\n        if (!(forSquare in Ox88)) {\n          return [];\n        } else {\n          firstSquare = lastSquare = Ox88[forSquare];\n          singleSquare = true;\n        }\n      }\n      for (var from = firstSquare; from <= lastSquare; from++) {\n        // did we run off the end of the board\n        if (from & 0x88) {\n          from += 7;\n          continue;\n        }\n        // empty square or opponent, skip\n        if (!this._board[from] || this._board[from].color === them) {\n          continue;\n        }\n        var type = this._board[from].type;\n        var to = void 0;\n        if (type === PAWN) {\n          if (forPiece && forPiece !== type) continue;\n          // single square, non-capturing\n          to = from + PAWN_OFFSETS[us][0];\n          if (!this._board[to]) {\n            addMove(moves, us, from, to, PAWN);\n            // double square\n            to = from + PAWN_OFFSETS[us][1];\n            if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n              addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN);\n            }\n          }\n          // pawn captures\n          for (var j = 2; j < 4; j++) {\n            to = from + PAWN_OFFSETS[us][j];\n            if (to & 0x88) continue;\n            if (((_a = this._board[to]) === null || _a === void 0 ? void 0 : _a.color) === them) {\n              addMove(moves, us, from, to, PAWN, this._board[to].type, BITS.CAPTURE);\n            } else if (to === this._epSquare) {\n              addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE);\n            }\n          }\n        } else {\n          if (forPiece && forPiece !== type) continue;\n          for (var _j = 0, len = PIECE_OFFSETS[type].length; _j < len; _j++) {\n            var offset = PIECE_OFFSETS[type][_j];\n            to = from;\n            while (true) {\n              to += offset;\n              if (to & 0x88) break;\n              if (!this._board[to]) {\n                addMove(moves, us, from, to, type);\n              } else {\n                // own color, stop loop\n                if (this._board[to].color === us) break;\n                addMove(moves, us, from, to, type, this._board[to].type, BITS.CAPTURE);\n                break;\n              }\n              /* break, if knight or king */\n              if (type === KNIGHT || type === KING) break;\n            }\n          }\n        }\n      }\n      /*\n       * check for castling if we're:\n       *   a) generating all moves, or\n       *   b) doing single square move generation on the king's square\n       */\n      if (forPiece === undefined || forPiece === KING) {\n        if (!singleSquare || lastSquare === this._kings[us]) {\n          // king-side castling\n          if (this._castling[us] & BITS.KSIDE_CASTLE) {\n            var castlingFrom = this._kings[us];\n            var castlingTo = castlingFrom + 2;\n            if (!this._board[castlingFrom + 1] && !this._board[castlingTo] && !this._attacked(them, this._kings[us]) && !this._attacked(them, castlingFrom + 1) && !this._attacked(them, castlingTo)) {\n              addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.KSIDE_CASTLE);\n            }\n          }\n          // queen-side castling\n          if (this._castling[us] & BITS.QSIDE_CASTLE) {\n            var _castlingFrom = this._kings[us];\n            var _castlingTo = _castlingFrom - 2;\n            if (!this._board[_castlingFrom - 1] && !this._board[_castlingFrom - 2] && !this._board[_castlingFrom - 3] && !this._attacked(them, this._kings[us]) && !this._attacked(them, _castlingFrom - 1) && !this._attacked(them, _castlingTo)) {\n              addMove(moves, us, this._kings[us], _castlingTo, KING, undefined, BITS.QSIDE_CASTLE);\n            }\n          }\n        }\n      }\n      /*\n       * return all pseudo-legal moves (this includes moves that allow the king\n       * to be captured)\n       */\n      if (!legal) {\n        return moves;\n      }\n      // filter out illegal moves\n      var legalMoves = [];\n      for (var i = 0, _len = moves.length; i < _len; i++) {\n        this._makeMove(moves[i]);\n        if (!this._isKingAttacked(us)) {\n          legalMoves.push(moves[i]);\n        }\n        this._undoMove();\n      }\n      return legalMoves;\n    }\n  }, {\n    key: \"move\",\n    value: function move(_move) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref4$strict = _ref4.strict,\n        strict = _ref4$strict === void 0 ? false : _ref4$strict;\n      /*\n       * The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')       <- argument is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- argument is a move object\n       *         to :'h8',\n       *         promotion: 'q' })\n       *\n       *\n       * An optional strict argument may be supplied to tell chess.js to\n       * strictly follow the SAN specification.\n       */\n      var moveObj = null;\n      if (typeof _move === 'string') {\n        moveObj = this._moveFromSan(_move, strict);\n      } else if (typeof _move === 'object') {\n        var moves = this._moves();\n        // convert the pretty move object to an ugly move object\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (_move.from === algebraic(moves[i].from) && _move.to === algebraic(moves[i].to) && (!('promotion' in moves[i]) || _move.promotion === moves[i].promotion)) {\n            moveObj = moves[i];\n            break;\n          }\n        }\n      }\n      // failed to find move\n      if (!moveObj) {\n        if (typeof _move === 'string') {\n          throw new Error(\"Invalid move: \".concat(_move));\n        } else {\n          throw new Error(\"Invalid move: \".concat(JSON.stringify(_move)));\n        }\n      }\n      /*\n       * need to make a copy of move because we can't generate SAN after the move\n       * is made\n       */\n      var prettyMove = this._makePretty(moveObj);\n      this._makeMove(moveObj);\n      return prettyMove;\n    }\n  }, {\n    key: \"_push\",\n    value: function _push(move) {\n      this._history.push({\n        move: move,\n        kings: {\n          b: this._kings.b,\n          w: this._kings.w\n        },\n        turn: this._turn,\n        castling: {\n          b: this._castling.b,\n          w: this._castling.w\n        },\n        epSquare: this._epSquare,\n        halfMoves: this._halfMoves,\n        moveNumber: this._moveNumber\n      });\n    }\n  }, {\n    key: \"_makeMove\",\n    value: function _makeMove(move) {\n      var us = this._turn;\n      var them = swapColor(us);\n      this._push(move);\n      this._board[move.to] = this._board[move.from];\n      delete this._board[move.from];\n      // if ep capture, remove the captured pawn\n      if (move.flags & BITS.EP_CAPTURE) {\n        if (this._turn === BLACK) {\n          delete this._board[move.to - 16];\n        } else {\n          delete this._board[move.to + 16];\n        }\n      }\n      // if pawn promotion, replace with new piece\n      if (move.promotion) {\n        this._board[move.to] = {\n          type: move.promotion,\n          color: us\n        };\n      }\n      // if we moved the king\n      if (this._board[move.to].type === KING) {\n        this._kings[us] = move.to;\n        // if we castled, move the rook next to the king\n        if (move.flags & BITS.KSIDE_CASTLE) {\n          var castlingTo = move.to - 1;\n          var castlingFrom = move.to + 1;\n          this._board[castlingTo] = this._board[castlingFrom];\n          delete this._board[castlingFrom];\n        } else if (move.flags & BITS.QSIDE_CASTLE) {\n          var _castlingTo2 = move.to + 1;\n          var _castlingFrom2 = move.to - 2;\n          this._board[_castlingTo2] = this._board[_castlingFrom2];\n          delete this._board[_castlingFrom2];\n        }\n        // turn off castling\n        this._castling[us] = 0;\n      }\n      // turn off castling if we move a rook\n      if (this._castling[us]) {\n        for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n          if (move.from === ROOKS[us][i].square && this._castling[us] & ROOKS[us][i].flag) {\n            this._castling[us] ^= ROOKS[us][i].flag;\n            break;\n          }\n        }\n      }\n      // turn off castling if we capture a rook\n      if (this._castling[them]) {\n        for (var _i4 = 0, _len2 = ROOKS[them].length; _i4 < _len2; _i4++) {\n          if (move.to === ROOKS[them][_i4].square && this._castling[them] & ROOKS[them][_i4].flag) {\n            this._castling[them] ^= ROOKS[them][_i4].flag;\n            break;\n          }\n        }\n      }\n      // if big pawn move, update the en passant square\n      if (move.flags & BITS.BIG_PAWN) {\n        if (us === BLACK) {\n          this._epSquare = move.to - 16;\n        } else {\n          this._epSquare = move.to + 16;\n        }\n      } else {\n        this._epSquare = EMPTY;\n      }\n      // reset the 50 move counter if a pawn is moved or a piece is captured\n      if (move.piece === PAWN) {\n        this._halfMoves = 0;\n      } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        this._halfMoves = 0;\n      } else {\n        this._halfMoves++;\n      }\n      if (us === BLACK) {\n        this._moveNumber++;\n      }\n      this._turn = them;\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      var move = this._undoMove();\n      return move ? this._makePretty(move) : null;\n    }\n  }, {\n    key: \"_undoMove\",\n    value: function _undoMove() {\n      var old = this._history.pop();\n      if (old === undefined) {\n        return null;\n      }\n      var move = old.move;\n      this._kings = old.kings;\n      this._turn = old.turn;\n      this._castling = old.castling;\n      this._epSquare = old.epSquare;\n      this._halfMoves = old.halfMoves;\n      this._moveNumber = old.moveNumber;\n      var us = this._turn;\n      var them = swapColor(us);\n      this._board[move.from] = this._board[move.to];\n      this._board[move.from].type = move.piece; // to undo any promotions\n      delete this._board[move.to];\n      if (move.captured) {\n        if (move.flags & BITS.EP_CAPTURE) {\n          // en passant capture\n          var index;\n          if (us === BLACK) {\n            index = move.to - 16;\n          } else {\n            index = move.to + 16;\n          }\n          this._board[index] = {\n            type: PAWN,\n            color: them\n          };\n        } else {\n          // regular capture\n          this._board[move.to] = {\n            type: move.captured,\n            color: them\n          };\n        }\n      }\n      if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n        var castlingTo, castlingFrom;\n        if (move.flags & BITS.KSIDE_CASTLE) {\n          castlingTo = move.to + 1;\n          castlingFrom = move.to - 1;\n        } else {\n          castlingTo = move.to - 2;\n          castlingFrom = move.to + 1;\n        }\n        this._board[castlingTo] = this._board[castlingFrom];\n        delete this._board[castlingFrom];\n      }\n      return move;\n    }\n  }, {\n    key: \"pgn\",\n    value: function pgn() {\n      var _this2 = this;\n      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref5$newline = _ref5.newline,\n        newline = _ref5$newline === void 0 ? '\\n' : _ref5$newline,\n        _ref5$maxWidth = _ref5.maxWidth,\n        maxWidth = _ref5$maxWidth === void 0 ? 0 : _ref5$maxWidth;\n      /*\n       * using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var result = [];\n      var headerExists = false;\n      /* add the PGN header information */\n      for (var i in this._header) {\n        /*\n         * TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push('[' + i + ' \"' + this._header[i] + '\"]' + newline);\n        headerExists = true;\n      }\n      if (headerExists && this._history.length) {\n        result.push(newline);\n      }\n      var appendComment = function appendComment(moveString) {\n        var comment = _this2._comments[_this2.fen()];\n        if (typeof comment !== 'undefined') {\n          var delimiter = moveString.length > 0 ? ' ' : '';\n          moveString = \"\".concat(moveString).concat(delimiter, \"{\").concat(comment, \"}\");\n        }\n        return moveString;\n      };\n      // pop all of history onto reversed_history\n      var reversedHistory = [];\n      while (this._history.length > 0) {\n        reversedHistory.push(this._undoMove());\n      }\n      var moves = [];\n      var moveString = '';\n      // special case of a commented starting position with no moves\n      if (reversedHistory.length === 0) {\n        moves.push(appendComment(''));\n      }\n      // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n      while (reversedHistory.length > 0) {\n        moveString = appendComment(moveString);\n        var move = reversedHistory.pop();\n        // make TypeScript stop complaining about move being undefined\n        if (!move) {\n          break;\n        }\n        // if the position started with black to move, start PGN with #. ...\n        if (!this._history.length && move.color === 'b') {\n          var prefix = \"\".concat(this._moveNumber, \". ...\");\n          // is there a comment preceding the first move?\n          moveString = moveString ? \"\".concat(moveString, \" \").concat(prefix) : prefix;\n        } else if (move.color === 'w') {\n          // store the previous generated move_string if we have one\n          if (moveString.length) {\n            moves.push(moveString);\n          }\n          moveString = this._moveNumber + '.';\n        }\n        moveString = moveString + ' ' + this._moveToSan(move, this._moves({\n          legal: true\n        }));\n        this._makeMove(move);\n      }\n      // are there any other leftover moves?\n      if (moveString.length) {\n        moves.push(appendComment(moveString));\n      }\n      // is there a result?\n      if (typeof this._header.Result !== 'undefined') {\n        moves.push(this._header.Result);\n      }\n      /*\n       * history should be back to what it was before we started generating PGN,\n       * so join together moves\n       */\n      if (maxWidth === 0) {\n        return result.join('') + moves.join(' ');\n      }\n      // TODO (jah): huh?\n      var strip = function strip() {\n        if (result.length > 0 && result[result.length - 1] === ' ') {\n          result.pop();\n          return true;\n        }\n        return false;\n      };\n      // NB: this does not preserve comment whitespace.\n      var wrapComment = function wrapComment(width, move) {\n        var _iterator = _createForOfIteratorHelper(move.split(' ')),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var token = _step.value;\n            if (!token) {\n              continue;\n            }\n            if (width + token.length > maxWidth) {\n              while (strip()) {\n                width--;\n              }\n              result.push(newline);\n              width = 0;\n            }\n            result.push(token);\n            width += token.length;\n            result.push(' ');\n            width++;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        if (strip()) {\n          width--;\n        }\n        return width;\n      };\n      // wrap the PGN output at max_width\n      var currentWidth = 0;\n      for (var _i5 = 0; _i5 < moves.length; _i5++) {\n        if (currentWidth + moves[_i5].length > maxWidth) {\n          if (moves[_i5].includes('{')) {\n            currentWidth = wrapComment(currentWidth, moves[_i5]);\n            continue;\n          }\n        }\n        // if the current move will push past max_width\n        if (currentWidth + moves[_i5].length > maxWidth && _i5 !== 0) {\n          // don't end the line with whitespace\n          if (result[result.length - 1] === ' ') {\n            result.pop();\n          }\n          result.push(newline);\n          currentWidth = 0;\n        } else if (_i5 !== 0) {\n          result.push(' ');\n          currentWidth++;\n        }\n        result.push(moves[_i5]);\n        currentWidth += moves[_i5].length;\n      }\n      return result.join('');\n    }\n  }, {\n    key: \"header\",\n    value: function header() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key = 0; _key < _len3; _key++) {\n        args[_key] = arguments[_key];\n      }\n      for (var i = 0; i < args.length; i += 2) {\n        if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n          this._header[args[i]] = args[i + 1];\n        }\n      }\n      return this._header;\n    }\n  }, {\n    key: \"loadPgn\",\n    value: function loadPgn(pgn) {\n      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref6$strict = _ref6.strict,\n        strict = _ref6$strict === void 0 ? false : _ref6$strict,\n        _ref6$newlineChar = _ref6.newlineChar,\n        newlineChar = _ref6$newlineChar === void 0 ? '\\r?\\n' : _ref6$newlineChar;\n      function mask(str) {\n        return str.replace(/\\\\/g, '\\\\');\n      }\n      function parsePgnHeader(header) {\n        var headerObj = {};\n        var headers = header.split(new RegExp(mask(newlineChar)));\n        var key = '';\n        var value = '';\n        for (var i = 0; i < headers.length; i++) {\n          var regex = /^\\s*\\[\\s*([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/;\n          key = headers[i].replace(regex, '$1');\n          value = headers[i].replace(regex, '$2');\n          if (key.trim().length > 0) {\n            headerObj[key] = value;\n          }\n        }\n        return headerObj;\n      }\n      // strip whitespace from head/tail of PGN block\n      pgn = pgn.trim();\n      /*\n       * RegExp to split header. Takes advantage of the fact that header and movetext\n       * will always have a blank line between them (ie, two newline_char's). Handles\n       * case where movetext is empty by matching newlineChar until end of string is\n       * matched - effectively trimming from the end extra newlineChar.\n       *\n       * With default newline_char, will equal:\n       * /^(\\[((?:\\r?\\n)|.)*\\])((?:\\s*\\r?\\n){2}|(?:\\s*\\r?\\n)*$)/\n       */\n      var headerRegex = new RegExp('^(\\\\[((?:' + mask(newlineChar) + ')|.)*\\\\])' + '((?:\\\\s*' + mask(newlineChar) + '){2}|(?:\\\\s*' + mask(newlineChar) + ')*$)');\n      // If no header given, begin with moves.\n      var headerRegexResults = headerRegex.exec(pgn);\n      var headerString = headerRegexResults ? headerRegexResults.length >= 2 ? headerRegexResults[1] : '' : '';\n      // Put the board in the starting position\n      this.reset();\n      // parse PGN header\n      var headers = parsePgnHeader(headerString);\n      var fen = '';\n      for (var key in headers) {\n        // check to see user is including fen (possibly with wrong tag case)\n        if (key.toLowerCase() === 'fen') {\n          fen = headers[key];\n        }\n        this.header(key, headers[key]);\n      }\n      /*\n       * the permissive parser should attempt to load a fen tag, even if it's the\n       * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n       */\n      if (!strict) {\n        if (fen) {\n          this.load(fen, true);\n        }\n      } else {\n        /*\n         * strict parser - load the starting position indicated by [Setup '1']\n         * and [FEN position]\n         */\n        if (headers['SetUp'] === '1') {\n          if (!('FEN' in headers)) {\n            throw new Error('Invalid PGN: FEN tag must be supplied with SetUp tag');\n          }\n          // second argument to load: don't clear the headers\n          this.load(headers['FEN'], true);\n        }\n      }\n      /*\n       * NB: the regexes below that delete move numbers, recursive annotations,\n       * and numeric annotation glyphs may also match text in comments. To\n       * prevent this, we transform comments by hex-encoding them in place and\n       * decoding them again after the other tokens have been deleted.\n       *\n       * While the spec states that PGN files should be ASCII encoded, we use\n       * {en,de}codeURIComponent here to support arbitrary UTF8 as a convenience\n       * for modern users\n       */\n      function toHex(s) {\n        return Array.from(s).map(function (c) {\n          /*\n           * encodeURI doesn't transform most ASCII characters, so we handle\n           * these ourselves\n           */\n          return c.charCodeAt(0) < 128 ? c.charCodeAt(0).toString(16) : encodeURIComponent(c).replace(/%/g, '').toLowerCase();\n        }).join('');\n      }\n      function fromHex(s) {\n        return s.length == 0 ? '' : decodeURIComponent('%' + (s.match(/.{1,2}/g) || []).join('%'));\n      }\n      var encodeComment = function encodeComment(s) {\n        s = s.replace(new RegExp(mask(newlineChar), 'g'), ' ');\n        return \"{\".concat(toHex(s.slice(1, s.length - 1)), \"}\");\n      };\n      var decodeComment = function decodeComment(s) {\n        if (s.startsWith('{') && s.endsWith('}')) {\n          return fromHex(s.slice(1, s.length - 1));\n        }\n      };\n      // delete header to get the moves\n      var ms = pgn.replace(headerString, '').replace(\n      // encode comments so they don't get deleted below\n      new RegExp(\"({[^}]*})+?|;([^\".concat(mask(newlineChar), \"]*)\"), 'g'), function (_match, bracket, semicolon) {\n        return bracket !== undefined ? encodeComment(bracket) : ' ' + encodeComment(\"{\".concat(semicolon.slice(1), \"}\"));\n      }).replace(new RegExp(mask(newlineChar), 'g'), ' ');\n      // delete recursive annotation variations\n      var ravRegex = /(\\([^()]+\\))+?/g;\n      while (ravRegex.test(ms)) {\n        ms = ms.replace(ravRegex, '');\n      }\n      // delete move numbers\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n      // delete ... indicating black to move\n      ms = ms.replace(/\\.\\.\\./g, '');\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, '');\n      // trim and get array of moves\n      var moves = ms.trim().split(new RegExp(/\\s+/));\n      // delete empty entries\n      moves = moves.filter(function (move) {\n        return move !== '';\n      });\n      var result = '';\n      for (var halfMove = 0; halfMove < moves.length; halfMove++) {\n        var comment = decodeComment(moves[halfMove]);\n        if (comment !== undefined) {\n          this._comments[this.fen()] = comment;\n          continue;\n        }\n        var move = this._moveFromSan(moves[halfMove], strict);\n        // invalid move\n        if (move == null) {\n          // was the move an end of game marker\n          if (TERMINATION_MARKERS.indexOf(moves[halfMove]) > -1) {\n            result = moves[halfMove];\n          } else {\n            throw new Error(\"Invalid move in PGN: \".concat(moves[halfMove]));\n          }\n        } else {\n          // reset the end of game marker if making a valid move\n          result = '';\n          this._makeMove(move);\n        }\n      }\n      /*\n       * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n       * the termination marker. Only do this when headers are present, but the\n       * result tag is missing\n       */\n      if (result && Object.keys(this._header).length && !this._header['Result']) {\n        this.header('Result', result);\n      }\n    }\n    /*\n     * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n     * (SAN)\n     *\n     * @param {boolean} strict Use the strict SAN parser. It will throw errors\n     * on overly disambiguated moves (see below):\n     *\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n     * 4. ... Ne7 is technically the valid SAN\n     */\n  }, {\n    key: \"_moveToSan\",\n    value: function _moveToSan(move, moves) {\n      var output = '';\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        output = 'O-O';\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        output = 'O-O-O';\n      } else {\n        if (move.piece !== PAWN) {\n          var disambiguator = getDisambiguator(move, moves);\n          output += move.piece.toUpperCase() + disambiguator;\n        }\n        if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n          if (move.piece === PAWN) {\n            output += algebraic(move.from)[0];\n          }\n          output += 'x';\n        }\n        output += algebraic(move.to);\n        if (move.promotion) {\n          output += '=' + move.promotion.toUpperCase();\n        }\n      }\n      this._makeMove(move);\n      if (this.isCheck()) {\n        if (this.isCheckmate()) {\n          output += '#';\n        } else {\n          output += '+';\n        }\n      }\n      this._undoMove();\n      return output;\n    }\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  }, {\n    key: \"_moveFromSan\",\n    value: function _moveFromSan(move) {\n      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // strip off any move decorations: e.g Nf3+?! becomes Nf3\n      var cleanMove = strippedSan(move);\n      var pieceType = inferPieceType(cleanMove);\n      var moves = this._moves({\n        legal: true,\n        piece: pieceType\n      });\n      // strict parser\n      for (var i = 0, len = moves.length; i < len; i++) {\n        if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n          return moves[i];\n        }\n      }\n      // the strict parser failed\n      if (strict) {\n        return null;\n      }\n      var piece = undefined;\n      var matches = undefined;\n      var from = undefined;\n      var to = undefined;\n      var promotion = undefined;\n      /*\n       * The default permissive (non-strict) parser allows the user to parse\n       * non-standard chess notations. This parser is only run after the strict\n       * Standard Algebraic Notation (SAN) parser has failed.\n       *\n       * When running the permissive parser, we'll run a regex to grab the piece, the\n       * to/from square, and an optional promotion piece. This regex will\n       * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n       * f7f8q, b1c3\n       *\n       * NOTE: Some positions and moves may be ambiguous when using the permissive\n       * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n       * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n       * move). In these cases, the permissive parser will default to the most\n       * basic interpretation (which is b1c3 parsing to Nc3).\n       */\n      var overlyDisambiguated = false;\n      matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\n      //     piece         from              to       promotion\n      );\n\n      if (matches) {\n        piece = matches[1];\n        from = matches[2];\n        to = matches[3];\n        promotion = matches[4];\n        if (from.length == 1) {\n          overlyDisambiguated = true;\n        }\n      } else {\n        /*\n         * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n         * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n         * there is one legal knight move to e7). In this case, the value of\n         * 'from' variable will be a rank or file, not a square.\n         */\n        matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/);\n        if (matches) {\n          piece = matches[1];\n          from = matches[2];\n          to = matches[3];\n          promotion = matches[4];\n          if (from.length == 1) {\n            overlyDisambiguated = true;\n          }\n        }\n      }\n      pieceType = inferPieceType(cleanMove);\n      moves = this._moves({\n        legal: true,\n        piece: piece ? piece : pieceType\n      });\n      for (var _i6 = 0, _len4 = moves.length; _i6 < _len4; _i6++) {\n        if (from && to) {\n          // hand-compare move properties with the results from our permissive regex\n          if ((!piece || piece.toLowerCase() == moves[_i6].piece) && Ox88[from] == moves[_i6].from && Ox88[to] == moves[_i6].to && (!promotion || promotion.toLowerCase() == moves[_i6].promotion)) {\n            return moves[_i6];\n          } else if (overlyDisambiguated) {\n            /*\n             * SPECIAL CASE: we parsed a move string that may have an unneeded\n             * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n             */\n            var square = algebraic(moves[_i6].from);\n            if ((!piece || piece.toLowerCase() == moves[_i6].piece) && Ox88[to] == moves[_i6].to && (from == square[0] || from == square[1]) && (!promotion || promotion.toLowerCase() == moves[_i6].promotion)) {\n              return moves[_i6];\n            }\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"ascii\",\n    value: function ascii() {\n      var s = '   +------------------------+\\n';\n      for (var i = Ox88.a8; i <= Ox88.h1; i++) {\n        // display the rank\n        if (file(i) === 0) {\n          s += ' ' + '87654321'[rank(i)] + ' |';\n        }\n        if (this._board[i]) {\n          var piece = this._board[i].type;\n          var color = this._board[i].color;\n          var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n          s += ' ' + symbol + ' ';\n        } else {\n          s += ' . ';\n        }\n        if (i + 1 & 0x88) {\n          s += '|\\n';\n          i += 8;\n        }\n      }\n      s += '   +------------------------+\\n';\n      s += '     a  b  c  d  e  f  g  h';\n      return s;\n    }\n  }, {\n    key: \"perft\",\n    value: function perft(depth) {\n      var moves = this._moves({\n        legal: false\n      });\n      var nodes = 0;\n      var color = this._turn;\n      for (var i = 0, len = moves.length; i < len; i++) {\n        this._makeMove(moves[i]);\n        if (!this._isKingAttacked(color)) {\n          if (depth - 1 > 0) {\n            nodes += this.perft(depth - 1);\n          } else {\n            nodes++;\n          }\n        }\n        this._undoMove();\n      }\n      return nodes;\n    }\n    // pretty = external move object\n  }, {\n    key: \"_makePretty\",\n    value: function _makePretty(uglyMove) {\n      var color = uglyMove.color,\n        piece = uglyMove.piece,\n        from = uglyMove.from,\n        to = uglyMove.to,\n        flags = uglyMove.flags,\n        captured = uglyMove.captured,\n        promotion = uglyMove.promotion;\n      var prettyFlags = '';\n      for (var flag in BITS) {\n        if (BITS[flag] & flags) {\n          prettyFlags += FLAGS[flag];\n        }\n      }\n      var fromAlgebraic = algebraic(from);\n      var toAlgebraic = algebraic(to);\n      var move = {\n        color: color,\n        piece: piece,\n        from: fromAlgebraic,\n        to: toAlgebraic,\n        san: this._moveToSan(uglyMove, this._moves({\n          legal: true\n        })),\n        flags: prettyFlags,\n        lan: fromAlgebraic + toAlgebraic\n      };\n      if (captured) {\n        move.captured = captured;\n      }\n      if (promotion) {\n        move.promotion = promotion;\n        move.lan += promotion;\n      }\n      return move;\n    }\n  }, {\n    key: \"turn\",\n    value: function turn() {\n      return this._turn;\n    }\n  }, {\n    key: \"board\",\n    value: function board() {\n      var output = [];\n      var row = [];\n      for (var i = Ox88.a8; i <= Ox88.h1; i++) {\n        if (this._board[i] == null) {\n          row.push(null);\n        } else {\n          row.push({\n            square: algebraic(i),\n            type: this._board[i].type,\n            color: this._board[i].color\n          });\n        }\n        if (i + 1 & 0x88) {\n          output.push(row);\n          row = [];\n          i += 8;\n        }\n      }\n      return output;\n    }\n  }, {\n    key: \"squareColor\",\n    value: function squareColor(square) {\n      if (square in Ox88) {\n        var sq = Ox88[square];\n        return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark';\n      }\n      return null;\n    }\n  }, {\n    key: \"history\",\n    value: function history() {\n      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref7$verbose = _ref7.verbose,\n        verbose = _ref7$verbose === void 0 ? false : _ref7$verbose;\n      var reversedHistory = [];\n      var moveHistory = [];\n      while (this._history.length > 0) {\n        reversedHistory.push(this._undoMove());\n      }\n      while (true) {\n        var move = reversedHistory.pop();\n        if (!move) {\n          break;\n        }\n        if (verbose) {\n          moveHistory.push(Object.assign({\n            fen: this.fen()\n          }, this._makePretty(move)));\n        } else {\n          moveHistory.push(this._moveToSan(move, this._moves()));\n        }\n        this._makeMove(move);\n      }\n      return moveHistory;\n    }\n  }, {\n    key: \"_pruneComments\",\n    value: function _pruneComments() {\n      var _this3 = this;\n      var reversedHistory = [];\n      var currentComments = {};\n      var copyComment = function copyComment(fen) {\n        if (fen in _this3._comments) {\n          currentComments[fen] = _this3._comments[fen];\n        }\n      };\n      while (this._history.length > 0) {\n        reversedHistory.push(this._undoMove());\n      }\n      copyComment(this.fen());\n      while (true) {\n        var move = reversedHistory.pop();\n        if (!move) {\n          break;\n        }\n        this._makeMove(move);\n        copyComment(this.fen());\n      }\n      this._comments = currentComments;\n    }\n  }, {\n    key: \"getComment\",\n    value: function getComment() {\n      return this._comments[this.fen()];\n    }\n  }, {\n    key: \"setComment\",\n    value: function setComment(comment) {\n      this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']');\n    }\n  }, {\n    key: \"deleteComment\",\n    value: function deleteComment() {\n      var comment = this._comments[this.fen()];\n      delete this._comments[this.fen()];\n      return comment;\n    }\n  }, {\n    key: \"getComments\",\n    value: function getComments() {\n      var _this4 = this;\n      this._pruneComments();\n      return Object.keys(this._comments).map(function (fen) {\n        return {\n          fen: fen,\n          comment: _this4._comments[fen]\n        };\n      });\n    }\n  }, {\n    key: \"deleteComments\",\n    value: function deleteComments() {\n      var _this5 = this;\n      this._pruneComments();\n      return Object.keys(this._comments).map(function (fen) {\n        var comment = _this5._comments[fen];\n        delete _this5._comments[fen];\n        return {\n          fen: fen,\n          comment: comment\n        };\n      });\n    }\n  }]);\n  return Chess;\n}();","map":{"version":3,"mappings":"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EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAChD,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACjD,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAG,CAAC,EAAE,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EACjD,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,CAC/C;AAED;AACA,IAAMC,IAAI,GAAG,CACV,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAC5D,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAG,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,EAAE,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAG,CAAC,EAAE,CAAC,EAC9D,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,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","names":["WHITE","BLACK","PAWN","KNIGHT","BISHOP","ROOK","QUEEN","KING","DEFAULT_POSITION","EMPTY","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","SQUARES","BITS","Ox88","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","k","ATTACKS","RAYS","PIECE_MASKS","p","SYMBOLS","PROMOTIONS","RANK_1","RANK_2","RANK_7","RANK_8","ROOKS","square","flag","SECOND_RANK","TERMINATION_MARKERS","rank","file","isDigit","c","indexOf","algebraic","f","substring","swapColor","color","validateFen","fen","tokens","split","length","ok","error","moveNumber","parseInt","isNaN","halfMoves","test","rows","i","sumFields","previousWasNumber","kings","regex","match","getDisambiguator","move","moves","from","to","piece","ambiguities","sameRank","sameFile","len","ambigFrom","ambigTo","ambigPiece","charAt","addMove","captured","undefined","flags","promotion","push","inferPieceType","san","pieceType","matches","toLowerCase","strippedSan","replace","Chess","Array","load","keepHeaders","_board","_kings","_turn","_castling","_epSquare","_halfMoves","_moveNumber","_history","_comments","_header","_updateSetup","adjustments","concat","slice","join","Error","position","clear","put","type","empty","toUpperCase","castling","epSquare","bigPawnSquare","squares","_makeMove","isLegal","_isKingAttacked","_undoMove","sq","get","difference","index","offset","j","blocked","_attacked","attackedBy","isCheck","_moves","pieces","bishops","numPieces","squareColor","sum","positions","repetition","pop","isStalemate","isInsufficientMaterial","isThreefoldRepetition","isCheckmate","isDraw","verbose","map","_makePretty","_moveToSan","legal","forSquare","forPiece","us","them","firstSquare","lastSquare","singleSquare","castlingFrom","castlingTo","legalMoves","strict","moveObj","_moveFromSan","JSON","stringify","prettyMove","turn","_push","old","newline","maxWidth","result","headerExists","appendComment","moveString","comment","delimiter","reversedHistory","prefix","Result","strip","wrapComment","width","token","currentWidth","includes","args","pgn","newlineChar","mask","str","parsePgnHeader","header","headerObj","headers","RegExp","key","value","trim","headerRegex","headerRegexResults","exec","headerString","reset","toHex","s","charCodeAt","toString","encodeURIComponent","fromHex","decodeURIComponent","encodeComment","decodeComment","startsWith","endsWith","ms","_match","bracket","semicolon","ravRegex","filter","halfMove","Object","keys","output","disambiguator","cleanMove","overlyDisambiguated","symbol","depth","nodes","perft","uglyMove","prettyFlags","fromAlgebraic","toAlgebraic","lan","row","moveHistory","currentComments","copyComment","_pruneComments"],"sources":["/home/jon/dev/shallow_blue/test/client/node_modules/chess.js/src/chess.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2023, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nexport const WHITE = 'w'\nexport const BLACK = 'b'\n\nexport const PAWN = 'p'\nexport const KNIGHT = 'n'\nexport const BISHOP = 'b'\nexport const ROOK = 'r'\nexport const QUEEN = 'q'\nexport const KING = 'k'\n\nexport type Color = 'w' | 'b'\nexport type PieceSymbol = 'p' | 'n' | 'b' | 'r' | 'q' | 'k'\n\n// prettier-ignore\nexport type Square =\n    'a8' | 'b8' | 'c8' | 'd8' | 'e8' | 'f8' | 'g8' | 'h8' |\n    'a7' | 'b7' | 'c7' | 'd7' | 'e7' | 'f7' | 'g7' | 'h7' |\n    'a6' | 'b6' | 'c6' | 'd6' | 'e6' | 'f6' | 'g6' | 'h6' |\n    'a5' | 'b5' | 'c5' | 'd5' | 'e5' | 'f5' | 'g5' | 'h5' |\n    'a4' | 'b4' | 'c4' | 'd4' | 'e4' | 'f4' | 'g4' | 'h4' |\n    'a3' | 'b3' | 'c3' | 'd3' | 'e3' | 'f3' | 'g3' | 'h3' |\n    'a2' | 'b2' | 'c2' | 'd2' | 'e2' | 'f2' | 'g2' | 'h2' |\n    'a1' | 'b1' | 'c1' | 'd1' | 'e1' | 'f1' | 'g1' | 'h1'\n\nexport const DEFAULT_POSITION =\n  'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n\nexport type Piece = {\n  color: Color\n  type: PieceSymbol\n}\n\ntype InternalMove = {\n  color: Color\n  from: number\n  to: number\n  piece: PieceSymbol\n  captured?: PieceSymbol\n  promotion?: PieceSymbol\n  flags: number\n}\n\ninterface History {\n  move: InternalMove\n  kings: Record<Color, number>\n  turn: Color\n  castling: Record<Color, number>\n  epSquare: number\n  halfMoves: number\n  moveNumber: number\n}\n\nexport type Move = {\n  color: Color\n  from: Square\n  to: Square\n  piece: PieceSymbol\n  captured?: PieceSymbol\n  promotion?: PieceSymbol\n  flags: string\n  san: string\n  lan: string\n}\n\nconst EMPTY = -1\n\nconst FLAGS: Record<string, string> = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q',\n}\n\n// prettier-ignore\nexport const SQUARES: Square[] = [\n  'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8',\n  'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7',\n  'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6',\n  'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',\n  'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4',\n  'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3',\n  'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2',\n  'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'\n]\n\nconst BITS: Record<string, number> = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64,\n}\n\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88: Record<Square, number> = {\n  a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n  a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n  a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n  a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n  a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n  a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n  a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n  a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n}\n\nconst PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15],\n}\n\nconst PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1],\n}\n\n// prettier-ignore\nconst ATTACKS = [\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n  24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n];\n\n// prettier-ignore\nconst RAYS = [\n   17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n    0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n    0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n    0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n    0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n    1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n    0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n    0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n    0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n    0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n  -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n];\n\nconst PIECE_MASKS = { p: 0x1, n: 0x2, b: 0x4, r: 0x8, q: 0x10, k: 0x20 }\n\nconst SYMBOLS = 'pnbrqkPNBRQK'\n\nconst PROMOTIONS: PieceSymbol[] = [KNIGHT, BISHOP, ROOK, QUEEN]\n\nconst RANK_1 = 7\nconst RANK_2 = 6\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1\nconst RANK_8 = 0\n\nconst ROOKS = {\n  w: [\n    { square: Ox88.a1, flag: BITS.QSIDE_CASTLE },\n    { square: Ox88.h1, flag: BITS.KSIDE_CASTLE },\n  ],\n  b: [\n    { square: Ox88.a8, flag: BITS.QSIDE_CASTLE },\n    { square: Ox88.h8, flag: BITS.KSIDE_CASTLE },\n  ],\n}\n\nconst SECOND_RANK = { b: RANK_7, w: RANK_2 }\n\nconst TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*']\n\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square: number): number {\n  return square >> 4\n}\n\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square: number): number {\n  return square & 0xf\n}\n\nfunction isDigit(c: string): boolean {\n  return '0123456789'.indexOf(c) !== -1\n}\n\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square: number): Square {\n  const f = file(square)\n  const r = rank(square)\n  return ('abcdefgh'.substring(f, f + 1) +\n    '87654321'.substring(r, r + 1)) as Square\n}\n\nfunction swapColor(color: Color): Color {\n  return color === WHITE ? BLACK : WHITE\n}\n\nexport function validateFen(fen: string) {\n  // 1st criterion: 6 space-seperated fields?\n  const tokens = fen.split(/\\s+/)\n  if (tokens.length !== 6) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: must contain six space-delimited fields',\n    }\n  }\n\n  // 2nd criterion: move number field is a integer value > 0?\n  const moveNumber = parseInt(tokens[5], 10)\n  if (isNaN(moveNumber) || moveNumber <= 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: move number must be a positive integer',\n    }\n  }\n\n  // 3rd criterion: half move counter is an integer >= 0?\n  const halfMoves = parseInt(tokens[4], 10)\n  if (isNaN(halfMoves) || halfMoves < 0) {\n    return {\n      ok: false,\n      error:\n        'Invalid FEN: half move counter number must be a non-negative integer',\n    }\n  }\n\n  // 4th criterion: 4th field is a valid e.p.-string?\n  if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n    return { ok: false, error: 'Invalid FEN: en-passant square is invalid' }\n  }\n\n  // 5th criterion: 3th field is a valid castle-string?\n  if (/[^kKqQ-]/.test(tokens[2])) {\n    return { ok: false, error: 'Invalid FEN: castling availability is invalid' }\n  }\n\n  // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n  if (!/^(w|b)$/.test(tokens[1])) {\n    return { ok: false, error: 'Invalid FEN: side-to-move is invalid' }\n  }\n\n  // 7th criterion: 1st field contains 8 rows?\n  const rows = tokens[0].split('/')\n  if (rows.length !== 8) {\n    return {\n      ok: false,\n      error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\",\n    }\n  }\n\n  // 8th criterion: every row is valid?\n  for (let i = 0; i < rows.length; i++) {\n    // check for right sum of fields AND not two numbers in succession\n    let sumFields = 0\n    let previousWasNumber = false\n\n    for (let k = 0; k < rows[i].length; k++) {\n      if (isDigit(rows[i][k])) {\n        if (previousWasNumber) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (consecutive number)',\n          }\n        }\n        sumFields += parseInt(rows[i][k], 10)\n        previousWasNumber = true\n      } else {\n        if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (invalid piece)',\n          }\n        }\n        sumFields += 1\n        previousWasNumber = false\n      }\n    }\n    if (sumFields !== 8) {\n      return {\n        ok: false,\n        error: 'Invalid FEN: piece data is invalid (too many squares in rank)',\n      }\n    }\n  }\n\n  if (\n    (tokens[3][1] == '3' && tokens[1] == 'w') ||\n    (tokens[3][1] == '6' && tokens[1] == 'b')\n  ) {\n    return { ok: false, error: 'Invalid FEN: illegal en-passant square' }\n  }\n\n  const kings = [\n    { color: 'white', regex: /K/g },\n    { color: 'black', regex: /k/g },\n  ]\n\n  for (const { color, regex } of kings) {\n    if (!regex.test(tokens[0])) {\n      return { ok: false, error: `Invalid FEN: missing ${color} king` }\n    }\n\n    if ((tokens[0].match(regex) || []).length > 1) {\n      return { ok: false, error: `Invalid FEN: too many ${color} kings` }\n    }\n  }\n\n  return { ok: true }\n}\n\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move: InternalMove, moves: InternalMove[]) {\n  const from = move.from\n  const to = move.to\n  const piece = move.piece\n\n  let ambiguities = 0\n  let sameRank = 0\n  let sameFile = 0\n\n  for (let i = 0, len = moves.length; i < len; i++) {\n    const ambigFrom = moves[i].from\n    const ambigTo = moves[i].to\n    const ambigPiece = moves[i].piece\n\n    /*\n     * if a move of the same piece type ends on the same to square, we'll need\n     * to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n      ambiguities++\n\n      if (rank(from) === rank(ambigFrom)) {\n        sameRank++\n      }\n\n      if (file(from) === file(ambigFrom)) {\n        sameFile++\n      }\n    }\n  }\n\n  if (ambiguities > 0) {\n    if (sameRank > 0 && sameFile > 0) {\n      /*\n       * if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      return algebraic(from)\n    } else if (sameFile > 0) {\n      /*\n       * if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1)\n    } else {\n      // else use the file symbol\n      return algebraic(from).charAt(0)\n    }\n  }\n\n  return ''\n}\n\nfunction addMove(\n  moves: InternalMove[],\n  color: Color,\n  from: number,\n  to: number,\n  piece: PieceSymbol,\n  captured: PieceSymbol | undefined = undefined,\n  flags: number = BITS.NORMAL\n) {\n  const r = rank(to)\n\n  if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n    for (let i = 0; i < PROMOTIONS.length; i++) {\n      const promotion = PROMOTIONS[i]\n      moves.push({\n        color,\n        from,\n        to,\n        piece,\n        captured,\n        promotion,\n        flags: flags | BITS.PROMOTION,\n      })\n    }\n  } else {\n    moves.push({\n      color,\n      from,\n      to,\n      piece,\n      captured,\n      flags,\n    })\n  }\n}\n\nfunction inferPieceType(san: string) {\n  let pieceType = san.charAt(0)\n  if (pieceType >= 'a' && pieceType <= 'h') {\n    const matches = san.match(/[a-h]\\d.*[a-h]\\d/)\n    if (matches) {\n      return undefined\n    }\n    return PAWN\n  }\n  pieceType = pieceType.toLowerCase()\n  if (pieceType === 'o') {\n    return KING\n  }\n  return pieceType as PieceSymbol\n}\n\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move: string) {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\n}\n\nexport class Chess {\n  private _board = new Array<Piece>(128)\n  private _turn: Color = WHITE\n  private _header: Record<string, string> = {}\n  private _kings: Record<Color, number> = { w: EMPTY, b: EMPTY }\n  private _epSquare = -1\n  private _halfMoves = 0\n  private _moveNumber = 0\n  private _history: History[] = []\n  private _comments: Record<string, string> = {}\n  private _castling: Record<Color, number> = { w: 0, b: 0 }\n\n  constructor(fen = DEFAULT_POSITION) {\n    this.load(fen)\n  }\n\n  clear(keepHeaders = false) {\n    this._board = new Array<Piece>(128)\n    this._kings = { w: EMPTY, b: EMPTY }\n    this._turn = WHITE\n    this._castling = { w: 0, b: 0 }\n    this._epSquare = EMPTY\n    this._halfMoves = 0\n    this._moveNumber = 1\n    this._history = []\n    this._comments = {}\n    this._header = keepHeaders ? this._header : {}\n    this._updateSetup(this.fen())\n  }\n\n  load(fen: string, keepHeaders = false) {\n    let tokens = fen.split(/\\s+/)\n\n    // append commonly omitted fen tokens\n    if (tokens.length >= 2 && tokens.length < 6) {\n      const adjustments = ['-', '-', '0', '1']\n      fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ')\n    }\n\n    tokens = fen.split(/\\s+/)\n\n    const { ok, error } = validateFen(fen)\n    if (!ok) {\n      throw new Error(error)\n    }\n\n    const position = tokens[0]\n    let square = 0\n\n    this.clear(keepHeaders)\n\n    for (let i = 0; i < position.length; i++) {\n      const piece = position.charAt(i)\n\n      if (piece === '/') {\n        square += 8\n      } else if (isDigit(piece)) {\n        square += parseInt(piece, 10)\n      } else {\n        const color = piece < 'a' ? WHITE : BLACK\n        this.put(\n          { type: piece.toLowerCase() as PieceSymbol, color },\n          algebraic(square)\n        )\n        square++\n      }\n    }\n\n    this._turn = tokens[1] as Color\n\n    if (tokens[2].indexOf('K') > -1) {\n      this._castling.w |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      this._castling.w |= BITS.QSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      this._castling.b |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      this._castling.b |= BITS.QSIDE_CASTLE\n    }\n\n    this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3] as Square]\n    this._halfMoves = parseInt(tokens[4], 10)\n    this._moveNumber = parseInt(tokens[5], 10)\n\n    this._updateSetup(this.fen())\n  }\n\n  fen() {\n    let empty = 0\n    let fen = ''\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i]) {\n        if (empty > 0) {\n          fen += empty\n          empty = 0\n        }\n        const { color, type: piece } = this._board[i]\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n      } else {\n        empty++\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty\n        }\n\n        if (i !== Ox88.h1) {\n          fen += '/'\n        }\n\n        empty = 0\n        i += 8\n      }\n    }\n\n    let castling = ''\n    if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n      castling += 'K'\n    }\n    if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n      castling += 'Q'\n    }\n    if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n      castling += 'k'\n    }\n    if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n      castling += 'q'\n    }\n\n    // do we have an empty castling flag?\n    castling = castling || '-'\n\n    let epSquare = '-'\n    /*\n     * only print the ep square if en passant is a valid move (pawn is present\n     * and ep capture is not pinned)\n     */\n    if (this._epSquare !== EMPTY) {\n      const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16)\n      const squares = [bigPawnSquare + 1, bigPawnSquare - 1]\n\n      for (const square of squares) {\n        // is the square off the board?\n        if (square & 0x88) {\n          continue\n        }\n\n        const color = this._turn\n\n        // is there a pawn that can capture the epSquare?\n        if (\n          this._board[square]?.color === color &&\n          this._board[square]?.type === PAWN\n        ) {\n          // if the pawn makes an ep capture, does it leave it's king in check?\n          this._makeMove({\n            color,\n            from: square,\n            to: this._epSquare,\n            piece: PAWN,\n            captured: PAWN,\n            flags: BITS.EP_CAPTURE,\n          })\n          const isLegal = !this._isKingAttacked(color)\n          this._undoMove()\n\n          // if ep is legal, break and set the ep square in the FEN output\n          if (isLegal) {\n            epSquare = algebraic(this._epSquare)\n            break\n          }\n        }\n      }\n    }\n\n    return [\n      fen,\n      this._turn,\n      castling,\n      epSquare,\n      this._halfMoves,\n      this._moveNumber,\n    ].join(' ')\n  }\n\n  /*\n   * Called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object. If the FEN\n   * is equal to the default position, the SetUp and FEN are deleted the setup\n   * is only updated if history.length is zero, ie moves haven't been made.\n   */\n  private _updateSetup(fen: string) {\n    if (this._history.length > 0) return\n\n    if (fen !== DEFAULT_POSITION) {\n      this._header['SetUp'] = '1'\n      this._header['FEN'] = fen\n    } else {\n      delete this._header['SetUp']\n      delete this._header['FEN']\n    }\n  }\n\n  reset() {\n    this.load(DEFAULT_POSITION)\n  }\n\n  get(square: Square) {\n    return this._board[Ox88[square]] || false\n  }\n\n  put({ type, color }: { type: PieceSymbol; color: Color }, square: Square) {\n    // check for piece\n    if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n      return false\n    }\n\n    // check for valid square\n    if (!(square in Ox88)) {\n      return false\n    }\n\n    const sq = Ox88[square]\n\n    // don't let the user place more than one king\n    if (\n      type == KING &&\n      !(this._kings[color] == EMPTY || this._kings[color] == sq)\n    ) {\n      return false\n    }\n\n    this._board[sq] = { type: type as PieceSymbol, color: color as Color }\n\n    if (type === KING) {\n      this._kings[color] = sq\n    }\n\n    this._updateSetup(this.fen())\n\n    return true\n  }\n\n  remove(square: Square) {\n    const piece = this.get(square)\n    delete this._board[Ox88[square]]\n    if (piece && piece.type === KING) {\n      this._kings[piece.color] = EMPTY\n    }\n\n    this._updateSetup(this.fen())\n\n    return piece\n  }\n\n  _attacked(color: Color, square: number) {\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      // if empty square or wrong color\n      if (this._board[i] === undefined || this._board[i].color !== color) {\n        continue\n      }\n\n      const piece = this._board[i]\n      const difference = i - square\n\n      // skip - to/from square are the same\n      if (difference === 0) {\n        continue\n      }\n\n      const index = difference + 119\n\n      if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true\n          } else {\n            if (piece.color === BLACK) return true\n          }\n          continue\n        }\n\n        // if the piece is a knight or a king\n        if (piece.type === 'n' || piece.type === 'k') return true\n\n        const offset = RAYS[index]\n        let j = i + offset\n\n        let blocked = false\n        while (j !== square) {\n          if (this._board[j] != null) {\n            blocked = true\n            break\n          }\n          j += offset\n        }\n\n        if (!blocked) return true\n      }\n    }\n\n    return false\n  }\n\n  private _isKingAttacked(color: Color) {\n    return this._attacked(swapColor(color), this._kings[color])\n  }\n\n  isAttacked(square: Square, attackedBy: Color) {\n    return this._attacked(attackedBy, Ox88[square])\n  }\n\n  isCheck() {\n    return this._isKingAttacked(this._turn)\n  }\n\n  inCheck() {\n    return this.isCheck()\n  }\n\n  isCheckmate() {\n    return this.isCheck() && this._moves().length === 0\n  }\n\n  isStalemate() {\n    return !this.isCheck() && this._moves().length === 0\n  }\n\n  isInsufficientMaterial() {\n    /*\n     * k.b. vs k.b. (of opposite colors) with mate in 1:\n     * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n     *\n     * k.b. vs k.n. with mate in 1:\n     * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n     */\n    const pieces: Record<PieceSymbol, number> = {\n      b: 0,\n      n: 0,\n      r: 0,\n      q: 0,\n      k: 0,\n      p: 0,\n    }\n    const bishops = []\n    let numPieces = 0\n    let squareColor = 0\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      squareColor = (squareColor + 1) % 2\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      const piece = this._board[i]\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\n        if (piece.type === BISHOP) {\n          bishops.push(squareColor)\n        }\n        numPieces++\n      }\n    }\n\n    // k vs. k\n    if (numPieces === 2) {\n      return true\n    } else if (\n      // k vs. kn .... or .... k vs. kb\n      numPieces === 3 &&\n      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n    ) {\n      return true\n    } else if (numPieces === pieces[BISHOP] + 2) {\n      // kb vs. kb where any number of bishops are all on the same color\n      let sum = 0\n      const len = bishops.length\n      for (let i = 0; i < len; i++) {\n        sum += bishops[i]\n      }\n      if (sum === 0 || sum === len) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  isThreefoldRepetition() {\n    const moves = []\n    const positions: Record<string, number> = {}\n    let repetition = false\n\n    while (true) {\n      const move = this._undoMove()\n      if (!move) break\n      moves.push(move)\n    }\n\n    while (true) {\n      /*\n       * remove the last two fields in the FEN string, they're not needed when\n       * checking for draw by rep\n       */\n      const fen = this.fen().split(' ').slice(0, 4).join(' ')\n\n      // has the position occurred three or move times\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1\n      if (positions[fen] >= 3) {\n        repetition = true\n      }\n\n      const move = moves.pop()\n\n      if (!move) {\n        break\n      } else {\n        this._makeMove(move)\n      }\n    }\n\n    return repetition\n  }\n\n  isDraw() {\n    return (\n      this._halfMoves >= 100 || // 50 moves per side = 100 half moves\n      this.isStalemate() ||\n      this.isInsufficientMaterial() ||\n      this.isThreefoldRepetition()\n    )\n  }\n\n  isGameOver() {\n    return this.isCheckmate() || this.isStalemate() || this.isDraw()\n  }\n\n  moves(): string[]\n  moves({ square }: { square: Square }): string[]\n  moves({ verbose, square }: { verbose: true; square?: Square }): Move[]\n  moves({ verbose, square }: { verbose: false; square?: Square }): string[]\n  moves({\n    verbose,\n    square,\n  }: {\n    verbose?: boolean\n    square?: Square\n  }): string[] | Move[]\n  moves({\n    verbose = false,\n    square = undefined,\n  }: { verbose?: boolean; square?: Square } = {}) {\n    const moves = this._moves({ square })\n\n    if (verbose) {\n      return moves.map((move) => this._makePretty(move))\n    } else {\n      return moves.map((move) => this._moveToSan(move, moves))\n    }\n  }\n\n  _moves({\n    legal = true,\n    piece = undefined,\n    square = undefined,\n  }: {\n    legal?: boolean\n    piece?: PieceSymbol\n    square?: Square\n  } = {}) {\n    const forSquare = square ? (square.toLowerCase() as Square) : undefined\n    const forPiece = piece?.toLowerCase()\n\n    const moves: InternalMove[] = []\n    const us = this._turn\n    const them = swapColor(us)\n\n    let firstSquare = Ox88.a8\n    let lastSquare = Ox88.h1\n    let singleSquare = false\n\n    // are we generating moves for a single square?\n    if (forSquare) {\n      // illegal square, return empty moves\n      if (!(forSquare in Ox88)) {\n        return []\n      } else {\n        firstSquare = lastSquare = Ox88[forSquare]\n        singleSquare = true\n      }\n    }\n\n    for (let from = firstSquare; from <= lastSquare; from++) {\n      // did we run off the end of the board\n      if (from & 0x88) {\n        from += 7\n        continue\n      }\n\n      // empty square or opponent, skip\n      if (!this._board[from] || this._board[from].color === them) {\n        continue\n      }\n      const { type } = this._board[from]\n\n      let to: number\n      if (type === PAWN) {\n        if (forPiece && forPiece !== type) continue\n\n        // single square, non-capturing\n        to = from + PAWN_OFFSETS[us][0]\n        if (!this._board[to]) {\n          addMove(moves, us, from, to, PAWN)\n\n          // double square\n          to = from + PAWN_OFFSETS[us][1]\n          if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n            addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN)\n          }\n        }\n\n        // pawn captures\n        for (let j = 2; j < 4; j++) {\n          to = from + PAWN_OFFSETS[us][j]\n          if (to & 0x88) continue\n\n          if (this._board[to]?.color === them) {\n            addMove(\n              moves,\n              us,\n              from,\n              to,\n              PAWN,\n              this._board[to].type,\n              BITS.CAPTURE\n            )\n          } else if (to === this._epSquare) {\n            addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE)\n          }\n        }\n      } else {\n        if (forPiece && forPiece !== type) continue\n\n        for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n          const offset = PIECE_OFFSETS[type][j]\n          to = from\n\n          while (true) {\n            to += offset\n            if (to & 0x88) break\n\n            if (!this._board[to]) {\n              addMove(moves, us, from, to, type)\n            } else {\n              // own color, stop loop\n              if (this._board[to].color === us) break\n\n              addMove(\n                moves,\n                us,\n                from,\n                to,\n                type,\n                this._board[to].type,\n                BITS.CAPTURE\n              )\n              break\n            }\n\n            /* break, if knight or king */\n            if (type === KNIGHT || type === KING) break\n          }\n        }\n      }\n    }\n\n    /*\n     * check for castling if we're:\n     *   a) generating all moves, or\n     *   b) doing single square move generation on the king's square\n     */\n\n    if (forPiece === undefined || forPiece === KING) {\n      if (!singleSquare || lastSquare === this._kings[us]) {\n        // king-side castling\n        if (this._castling[us] & BITS.KSIDE_CASTLE) {\n          const castlingFrom = this._kings[us]\n          const castlingTo = castlingFrom + 2\n\n          if (\n            !this._board[castlingFrom + 1] &&\n            !this._board[castlingTo] &&\n            !this._attacked(them, this._kings[us]) &&\n            !this._attacked(them, castlingFrom + 1) &&\n            !this._attacked(them, castlingTo)\n          ) {\n            addMove(\n              moves,\n              us,\n              this._kings[us],\n              castlingTo,\n              KING,\n              undefined,\n              BITS.KSIDE_CASTLE\n            )\n          }\n        }\n\n        // queen-side castling\n        if (this._castling[us] & BITS.QSIDE_CASTLE) {\n          const castlingFrom = this._kings[us]\n          const castlingTo = castlingFrom - 2\n\n          if (\n            !this._board[castlingFrom - 1] &&\n            !this._board[castlingFrom - 2] &&\n            !this._board[castlingFrom - 3] &&\n            !this._attacked(them, this._kings[us]) &&\n            !this._attacked(them, castlingFrom - 1) &&\n            !this._attacked(them, castlingTo)\n          ) {\n            addMove(\n              moves,\n              us,\n              this._kings[us],\n              castlingTo,\n              KING,\n              undefined,\n              BITS.QSIDE_CASTLE\n            )\n          }\n        }\n      }\n    }\n\n    /*\n     * return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves\n    }\n\n    // filter out illegal moves\n    const legalMoves = []\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i])\n      if (!this._isKingAttacked(us)) {\n        legalMoves.push(moves[i])\n      }\n      this._undoMove()\n    }\n\n    return legalMoves\n  }\n\n  move(\n    move: string | { from: string; to: string; promotion?: string },\n    { strict = false }: { strict?: boolean } = {}\n  ) {\n    /*\n     * The move function can be called with in the following parameters:\n     *\n     * .move('Nxb7')       <- argument is a case-sensitive SAN string\n     *\n     * .move({ from: 'h7', <- argument is a move object\n     *         to :'h8',\n     *         promotion: 'q' })\n     *\n     *\n     * An optional strict argument may be supplied to tell chess.js to\n     * strictly follow the SAN specification.\n     */\n\n    let moveObj = null\n\n    if (typeof move === 'string') {\n      moveObj = this._moveFromSan(move, strict)\n    } else if (typeof move === 'object') {\n      const moves = this._moves()\n\n      // convert the pretty move object to an ugly move object\n      for (let i = 0, len = moves.length; i < len; i++) {\n        if (\n          move.from === algebraic(moves[i].from) &&\n          move.to === algebraic(moves[i].to) &&\n          (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)\n        ) {\n          moveObj = moves[i]\n          break\n        }\n      }\n    }\n\n    // failed to find move\n    if (!moveObj) {\n      if (typeof move === 'string') {\n        throw new Error(`Invalid move: ${move}`)\n      } else {\n        throw new Error(`Invalid move: ${JSON.stringify(move)}`)\n      }\n    }\n\n    /*\n     * need to make a copy of move because we can't generate SAN after the move\n     * is made\n     */\n    const prettyMove = this._makePretty(moveObj)\n\n    this._makeMove(moveObj)\n\n    return prettyMove\n  }\n\n  _push(move: InternalMove) {\n    this._history.push({\n      move,\n      kings: { b: this._kings.b, w: this._kings.w },\n      turn: this._turn,\n      castling: { b: this._castling.b, w: this._castling.w },\n      epSquare: this._epSquare,\n      halfMoves: this._halfMoves,\n      moveNumber: this._moveNumber,\n    })\n  }\n\n  private _makeMove(move: InternalMove) {\n    const us = this._turn\n    const them = swapColor(us)\n    this._push(move)\n\n    this._board[move.to] = this._board[move.from]\n    delete this._board[move.from]\n\n    // if ep capture, remove the captured pawn\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (this._turn === BLACK) {\n        delete this._board[move.to - 16]\n      } else {\n        delete this._board[move.to + 16]\n      }\n    }\n\n    // if pawn promotion, replace with new piece\n    if (move.promotion) {\n      this._board[move.to] = { type: move.promotion, color: us }\n    }\n\n    // if we moved the king\n    if (this._board[move.to].type === KING) {\n      this._kings[us] = move.to\n\n      // if we castled, move the rook next to the king\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        const castlingTo = move.to - 1\n        const castlingFrom = move.to + 1\n        this._board[castlingTo] = this._board[castlingFrom]\n        delete this._board[castlingFrom]\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        const castlingTo = move.to + 1\n        const castlingFrom = move.to - 2\n        this._board[castlingTo] = this._board[castlingFrom]\n        delete this._board[castlingFrom]\n      }\n\n      // turn off castling\n      this._castling[us] = 0\n    }\n\n    // turn off castling if we move a rook\n    if (this._castling[us]) {\n      for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (\n          move.from === ROOKS[us][i].square &&\n          this._castling[us] & ROOKS[us][i].flag\n        ) {\n          this._castling[us] ^= ROOKS[us][i].flag\n          break\n        }\n      }\n    }\n\n    // turn off castling if we capture a rook\n    if (this._castling[them]) {\n      for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (\n          move.to === ROOKS[them][i].square &&\n          this._castling[them] & ROOKS[them][i].flag\n        ) {\n          this._castling[them] ^= ROOKS[them][i].flag\n          break\n        }\n      }\n    }\n\n    // if big pawn move, update the en passant square\n    if (move.flags & BITS.BIG_PAWN) {\n      if (us === BLACK) {\n        this._epSquare = move.to - 16\n      } else {\n        this._epSquare = move.to + 16\n      }\n    } else {\n      this._epSquare = EMPTY\n    }\n\n    // reset the 50 move counter if a pawn is moved or a piece is captured\n    if (move.piece === PAWN) {\n      this._halfMoves = 0\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      this._halfMoves = 0\n    } else {\n      this._halfMoves++\n    }\n\n    if (us === BLACK) {\n      this._moveNumber++\n    }\n\n    this._turn = them\n  }\n\n  undo() {\n    const move = this._undoMove()\n    return move ? this._makePretty(move) : null\n  }\n\n  private _undoMove() {\n    const old = this._history.pop()\n    if (old === undefined) {\n      return null\n    }\n\n    const move = old.move\n\n    this._kings = old.kings\n    this._turn = old.turn\n    this._castling = old.castling\n    this._epSquare = old.epSquare\n    this._halfMoves = old.halfMoves\n    this._moveNumber = old.moveNumber\n\n    const us = this._turn\n    const them = swapColor(us)\n\n    this._board[move.from] = this._board[move.to]\n    this._board[move.from].type = move.piece // to undo any promotions\n    delete this._board[move.to]\n\n    if (move.captured) {\n      if (move.flags & BITS.EP_CAPTURE) {\n        // en passant capture\n        let index: number\n        if (us === BLACK) {\n          index = move.to - 16\n        } else {\n          index = move.to + 16\n        }\n        this._board[index] = { type: PAWN, color: them }\n      } else {\n        // regular capture\n        this._board[move.to] = { type: move.captured, color: them }\n      }\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      let castlingTo: number, castlingFrom: number\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castlingTo = move.to + 1\n        castlingFrom = move.to - 1\n      } else {\n        castlingTo = move.to - 2\n        castlingFrom = move.to + 1\n      }\n\n      this._board[castlingTo] = this._board[castlingFrom]\n      delete this._board[castlingFrom]\n    }\n\n    return move\n  }\n\n  pgn({\n    newline = '\\n',\n    maxWidth = 0,\n  }: { newline?: string; maxWidth?: number } = {}) {\n    /*\n     * using the specification from http://www.chessclub.com/help/PGN-spec\n     * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n     */\n\n    const result: string[] = []\n    let headerExists = false\n\n    /* add the PGN header information */\n    for (const i in this._header) {\n      /*\n       * TODO: order of enumerated properties in header object is not\n       * guaranteed, see ECMA-262 spec (section 12.6.4)\n       */\n      result.push('[' + i + ' \"' + this._header[i] + '\"]' + newline)\n      headerExists = true\n    }\n\n    if (headerExists && this._history.length) {\n      result.push(newline)\n    }\n\n    const appendComment = (moveString: string) => {\n      const comment = this._comments[this.fen()]\n      if (typeof comment !== 'undefined') {\n        const delimiter = moveString.length > 0 ? ' ' : ''\n        moveString = `${moveString}${delimiter}{${comment}}`\n      }\n      return moveString\n    }\n\n    // pop all of history onto reversed_history\n    const reversedHistory = []\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    const moves = []\n    let moveString = ''\n\n    // special case of a commented starting position with no moves\n    if (reversedHistory.length === 0) {\n      moves.push(appendComment(''))\n    }\n\n    // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n    while (reversedHistory.length > 0) {\n      moveString = appendComment(moveString)\n      const move = reversedHistory.pop()\n\n      // make TypeScript stop complaining about move being undefined\n      if (!move) {\n        break\n      }\n\n      // if the position started with black to move, start PGN with #. ...\n      if (!this._history.length && move.color === 'b') {\n        const prefix = `${this._moveNumber}. ...`\n        // is there a comment preceding the first move?\n        moveString = moveString ? `${moveString} ${prefix}` : prefix\n      } else if (move.color === 'w') {\n        // store the previous generated move_string if we have one\n        if (moveString.length) {\n          moves.push(moveString)\n        }\n        moveString = this._moveNumber + '.'\n      }\n\n      moveString =\n        moveString + ' ' + this._moveToSan(move, this._moves({ legal: true }))\n      this._makeMove(move)\n    }\n\n    // are there any other leftover moves?\n    if (moveString.length) {\n      moves.push(appendComment(moveString))\n    }\n\n    // is there a result?\n    if (typeof this._header.Result !== 'undefined') {\n      moves.push(this._header.Result)\n    }\n\n    /*\n     * history should be back to what it was before we started generating PGN,\n     * so join together moves\n     */\n    if (maxWidth === 0) {\n      return result.join('') + moves.join(' ')\n    }\n\n    // TODO (jah): huh?\n    const strip = function () {\n      if (result.length > 0 && result[result.length - 1] === ' ') {\n        result.pop()\n        return true\n      }\n      return false\n    }\n\n    // NB: this does not preserve comment whitespace.\n    const wrapComment = function (width: number, move: string) {\n      for (const token of move.split(' ')) {\n        if (!token) {\n          continue\n        }\n        if (width + token.length > maxWidth) {\n          while (strip()) {\n            width--\n          }\n          result.push(newline)\n          width = 0\n        }\n        result.push(token)\n        width += token.length\n        result.push(' ')\n        width++\n      }\n      if (strip()) {\n        width--\n      }\n      return width\n    }\n\n    // wrap the PGN output at max_width\n    let currentWidth = 0\n    for (let i = 0; i < moves.length; i++) {\n      if (currentWidth + moves[i].length > maxWidth) {\n        if (moves[i].includes('{')) {\n          currentWidth = wrapComment(currentWidth, moves[i])\n          continue\n        }\n      }\n      // if the current move will push past max_width\n      if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n        // don't end the line with whitespace\n        if (result[result.length - 1] === ' ') {\n          result.pop()\n        }\n\n        result.push(newline)\n        currentWidth = 0\n      } else if (i !== 0) {\n        result.push(' ')\n        currentWidth++\n      }\n      result.push(moves[i])\n      currentWidth += moves[i].length\n    }\n\n    return result.join('')\n  }\n\n  header(...args: string[]) {\n    for (let i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        this._header[args[i]] = args[i + 1]\n      }\n    }\n    return this._header\n  }\n\n  loadPgn(\n    pgn: string,\n    {\n      strict = false,\n      newlineChar = '\\r?\\n',\n    }: { strict?: boolean; newlineChar?: string } = {}\n  ) {\n    function mask(str: string): string {\n      return str.replace(/\\\\/g, '\\\\')\n    }\n\n    function parsePgnHeader(header: string): { [key: string]: string } {\n      const headerObj: Record<string, string> = {}\n      const headers = header.split(new RegExp(mask(newlineChar)))\n      let key = ''\n      let value = ''\n\n      for (let i = 0; i < headers.length; i++) {\n        const regex = /^\\s*\\[\\s*([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/\n        key = headers[i].replace(regex, '$1')\n        value = headers[i].replace(regex, '$2')\n        if (key.trim().length > 0) {\n          headerObj[key] = value\n        }\n      }\n\n      return headerObj\n    }\n\n    // strip whitespace from head/tail of PGN block\n    pgn = pgn.trim()\n\n    /*\n     * RegExp to split header. Takes advantage of the fact that header and movetext\n     * will always have a blank line between them (ie, two newline_char's). Handles\n     * case where movetext is empty by matching newlineChar until end of string is\n     * matched - effectively trimming from the end extra newlineChar.\n     *\n     * With default newline_char, will equal:\n     * /^(\\[((?:\\r?\\n)|.)*\\])((?:\\s*\\r?\\n){2}|(?:\\s*\\r?\\n)*$)/\n     */\n    const headerRegex = new RegExp(\n      '^(\\\\[((?:' +\n        mask(newlineChar) +\n        ')|.)*\\\\])' +\n        '((?:\\\\s*' +\n        mask(newlineChar) +\n        '){2}|(?:\\\\s*' +\n        mask(newlineChar) +\n        ')*$)'\n    )\n\n    // If no header given, begin with moves.\n    const headerRegexResults = headerRegex.exec(pgn)\n    const headerString = headerRegexResults\n      ? headerRegexResults.length >= 2\n        ? headerRegexResults[1]\n        : ''\n      : ''\n\n    // Put the board in the starting position\n    this.reset()\n\n    // parse PGN header\n    const headers = parsePgnHeader(headerString)\n    let fen = ''\n\n    for (const key in headers) {\n      // check to see user is including fen (possibly with wrong tag case)\n      if (key.toLowerCase() === 'fen') {\n        fen = headers[key]\n      }\n\n      this.header(key, headers[key])\n    }\n\n    /*\n     * the permissive parser should attempt to load a fen tag, even if it's the\n     * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n     */\n    if (!strict) {\n      if (fen) {\n        this.load(fen, true)\n      }\n    } else {\n      /*\n       * strict parser - load the starting position indicated by [Setup '1']\n       * and [FEN position]\n       */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers)) {\n          throw new Error(\n            'Invalid PGN: FEN tag must be supplied with SetUp tag'\n          )\n        }\n        // second argument to load: don't clear the headers\n        this.load(headers['FEN'], true)\n      }\n    }\n\n    /*\n     * NB: the regexes below that delete move numbers, recursive annotations,\n     * and numeric annotation glyphs may also match text in comments. To\n     * prevent this, we transform comments by hex-encoding them in place and\n     * decoding them again after the other tokens have been deleted.\n     *\n     * While the spec states that PGN files should be ASCII encoded, we use\n     * {en,de}codeURIComponent here to support arbitrary UTF8 as a convenience\n     * for modern users\n     */\n\n    function toHex(s: string): string {\n      return Array.from(s)\n        .map(function (c) {\n          /*\n           * encodeURI doesn't transform most ASCII characters, so we handle\n           * these ourselves\n           */\n          return c.charCodeAt(0) < 128\n            ? c.charCodeAt(0).toString(16)\n            : encodeURIComponent(c).replace(/%/g, '').toLowerCase()\n        })\n        .join('')\n    }\n\n    function fromHex(s: string): string {\n      return s.length == 0\n        ? ''\n        : decodeURIComponent('%' + (s.match(/.{1,2}/g) || []).join('%'))\n    }\n\n    const encodeComment = function (s: string) {\n      s = s.replace(new RegExp(mask(newlineChar), 'g'), ' ')\n      return `{${toHex(s.slice(1, s.length - 1))}}`\n    }\n\n    const decodeComment = function (s: string) {\n      if (s.startsWith('{') && s.endsWith('}')) {\n        return fromHex(s.slice(1, s.length - 1))\n      }\n    }\n\n    // delete header to get the moves\n    let ms = pgn\n      .replace(headerString, '')\n      .replace(\n        // encode comments so they don't get deleted below\n        new RegExp(`({[^}]*})+?|;([^${mask(newlineChar)}]*)`, 'g'),\n        function (_match, bracket, semicolon) {\n          return bracket !== undefined\n            ? encodeComment(bracket)\n            : ' ' + encodeComment(`{${semicolon.slice(1)}}`)\n        }\n      )\n      .replace(new RegExp(mask(newlineChar), 'g'), ' ')\n\n    // delete recursive annotation variations\n    const ravRegex = /(\\([^()]+\\))+?/g\n    while (ravRegex.test(ms)) {\n      ms = ms.replace(ravRegex, '')\n    }\n\n    // delete move numbers\n    ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\n\n    // delete ... indicating black to move\n    ms = ms.replace(/\\.\\.\\./g, '')\n\n    /* delete numeric annotation glyphs */\n    ms = ms.replace(/\\$\\d+/g, '')\n\n    // trim and get array of moves\n    let moves = ms.trim().split(new RegExp(/\\s+/))\n\n    // delete empty entries\n    moves = moves.filter((move) => move !== '')\n\n    let result = ''\n\n    for (let halfMove = 0; halfMove < moves.length; halfMove++) {\n      const comment = decodeComment(moves[halfMove])\n      if (comment !== undefined) {\n        this._comments[this.fen()] = comment\n        continue\n      }\n\n      const move = this._moveFromSan(moves[halfMove], strict)\n\n      // invalid move\n      if (move == null) {\n        // was the move an end of game marker\n        if (TERMINATION_MARKERS.indexOf(moves[halfMove]) > -1) {\n          result = moves[halfMove]\n        } else {\n          throw new Error(`Invalid move in PGN: ${moves[halfMove]}`)\n        }\n      } else {\n        // reset the end of game marker if making a valid move\n        result = ''\n        this._makeMove(move)\n      }\n    }\n\n    /*\n     * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n     * the termination marker. Only do this when headers are present, but the\n     * result tag is missing\n     */\n\n    if (result && Object.keys(this._header).length && !this._header['Result']) {\n      this.header('Result', result)\n    }\n  }\n\n  /*\n   * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} strict Use the strict SAN parser. It will throw errors\n   * on overly disambiguated moves (see below):\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n\n  private _moveToSan(move: InternalMove, moves: InternalMove[]) {\n    let output = ''\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O'\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O'\n    } else {\n      if (move.piece !== PAWN) {\n        const disambiguator = getDisambiguator(move, moves)\n        output += move.piece.toUpperCase() + disambiguator\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0]\n        }\n        output += 'x'\n      }\n\n      output += algebraic(move.to)\n\n      if (move.promotion) {\n        output += '=' + move.promotion.toUpperCase()\n      }\n    }\n\n    this._makeMove(move)\n    if (this.isCheck()) {\n      if (this.isCheckmate()) {\n        output += '#'\n      } else {\n        output += '+'\n      }\n    }\n    this._undoMove()\n\n    return output\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  private _moveFromSan(move: string, strict = false): InternalMove | null {\n    // strip off any move decorations: e.g Nf3+?! becomes Nf3\n    const cleanMove = strippedSan(move)\n\n    let pieceType = inferPieceType(cleanMove)\n    let moves = this._moves({ legal: true, piece: pieceType })\n\n    // strict parser\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n        return moves[i]\n      }\n    }\n\n    // the strict parser failed\n    if (strict) {\n      return null\n    }\n\n    let piece = undefined\n    let matches = undefined\n    let from = undefined\n    let to = undefined\n    let promotion = undefined\n\n    /*\n     * The default permissive (non-strict) parser allows the user to parse\n     * non-standard chess notations. This parser is only run after the strict\n     * Standard Algebraic Notation (SAN) parser has failed.\n     *\n     * When running the permissive parser, we'll run a regex to grab the piece, the\n     * to/from square, and an optional promotion piece. This regex will\n     * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n     * f7f8q, b1c3\n     *\n     * NOTE: Some positions and moves may be ambiguous when using the permissive\n     * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n     * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n     * move). In these cases, the permissive parser will default to the most\n     * basic interpretation (which is b1c3 parsing to Nc3).\n     */\n\n    let overlyDisambiguated = false\n\n    matches = cleanMove.match(\n      /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\n      //     piece         from              to       promotion\n    )\n\n    if (matches) {\n      piece = matches[1]\n      from = matches[2] as Square\n      to = matches[3] as Square\n      promotion = matches[4]\n\n      if (from.length == 1) {\n        overlyDisambiguated = true\n      }\n    } else {\n      /*\n       * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n       * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n       * there is one legal knight move to e7). In this case, the value of\n       * 'from' variable will be a rank or file, not a square.\n       */\n\n      matches = cleanMove.match(\n        /([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/\n      )\n\n      if (matches) {\n        piece = matches[1]\n        from = matches[2] as Square\n        to = matches[3] as Square\n        promotion = matches[4]\n\n        if (from.length == 1) {\n          overlyDisambiguated = true\n        }\n      }\n    }\n\n    pieceType = inferPieceType(cleanMove)\n    moves = this._moves({\n      legal: true,\n      piece: piece ? (piece as PieceSymbol) : pieceType,\n    })\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (from && to) {\n        // hand-compare move properties with the results from our permissive regex\n        if (\n          (!piece || piece.toLowerCase() == moves[i].piece) &&\n          Ox88[from] == moves[i].from &&\n          Ox88[to] == moves[i].to &&\n          (!promotion || promotion.toLowerCase() == moves[i].promotion)\n        ) {\n          return moves[i]\n        } else if (overlyDisambiguated) {\n          /*\n           * SPECIAL CASE: we parsed a move string that may have an unneeded\n           * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n           */\n\n          const square = algebraic(moves[i].from)\n          if (\n            (!piece || piece.toLowerCase() == moves[i].piece) &&\n            Ox88[to] == moves[i].to &&\n            (from == square[0] || from == square[1]) &&\n            (!promotion || promotion.toLowerCase() == moves[i].promotion)\n          ) {\n            return moves[i]\n          }\n        }\n      }\n    }\n\n    return null\n  }\n\n  ascii() {\n    let s = '   +------------------------+\\n'\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // display the rank\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |'\n      }\n\n      if (this._board[i]) {\n        const piece = this._board[i].type\n        const color = this._board[i].color\n        const symbol =\n          color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n        s += ' ' + symbol + ' '\n      } else {\n        s += ' . '\n      }\n\n      if ((i + 1) & 0x88) {\n        s += '|\\n'\n        i += 8\n      }\n    }\n    s += '   +------------------------+\\n'\n    s += '     a  b  c  d  e  f  g  h'\n\n    return s\n  }\n\n  perft(depth: number) {\n    const moves = this._moves({ legal: false })\n    let nodes = 0\n    const color = this._turn\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i])\n      if (!this._isKingAttacked(color)) {\n        if (depth - 1 > 0) {\n          nodes += this.perft(depth - 1)\n        } else {\n          nodes++\n        }\n      }\n      this._undoMove()\n    }\n\n    return nodes\n  }\n\n  // pretty = external move object\n  private _makePretty(uglyMove: InternalMove): Move {\n    const { color, piece, from, to, flags, captured, promotion } = uglyMove\n\n    let prettyFlags = ''\n\n    for (const flag in BITS) {\n      if (BITS[flag] & flags) {\n        prettyFlags += FLAGS[flag]\n      }\n    }\n\n    const fromAlgebraic = algebraic(from)\n    const toAlgebraic = algebraic(to)\n\n    const move: Move = {\n      color,\n      piece,\n      from: fromAlgebraic,\n      to: toAlgebraic,\n      san: this._moveToSan(uglyMove, this._moves({ legal: true })),\n      flags: prettyFlags,\n      lan: fromAlgebraic + toAlgebraic,\n    }\n\n    if (captured) {\n      move.captured = captured\n    }\n    if (promotion) {\n      move.promotion = promotion\n      move.lan += promotion\n    }\n\n    return move\n  }\n\n  turn() {\n    return this._turn\n  }\n\n  board() {\n    const output = []\n    let row = []\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i] == null) {\n        row.push(null)\n      } else {\n        row.push({\n          square: algebraic(i),\n          type: this._board[i].type,\n          color: this._board[i].color,\n        })\n      }\n      if ((i + 1) & 0x88) {\n        output.push(row)\n        row = []\n        i += 8\n      }\n    }\n\n    return output\n  }\n\n  squareColor(square: Square) {\n    if (square in Ox88) {\n      const sq = Ox88[square]\n      return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark'\n    }\n\n    return null\n  }\n\n  history(): string[]\n  history({ verbose }: { verbose: true }): (Move & { fen: string })[]\n  history({ verbose }: { verbose: false }): string[]\n  history({\n    verbose,\n  }: {\n    verbose: boolean\n  }): string[] | (Move & { fen: string })[]\n  history({ verbose = false }: { verbose?: boolean } = {}) {\n    const reversedHistory = []\n    const moveHistory = []\n\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    while (true) {\n      const move = reversedHistory.pop()\n      if (!move) {\n        break\n      }\n\n      if (verbose) {\n        moveHistory.push({ fen: this.fen(), ...this._makePretty(move) })\n      } else {\n        moveHistory.push(this._moveToSan(move, this._moves()))\n      }\n      this._makeMove(move)\n    }\n\n    return moveHistory\n  }\n\n  private _pruneComments() {\n    const reversedHistory = []\n    const currentComments: Record<string, string> = {}\n\n    const copyComment = (fen: string) => {\n      if (fen in this._comments) {\n        currentComments[fen] = this._comments[fen]\n      }\n    }\n\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    copyComment(this.fen())\n\n    while (true) {\n      const move = reversedHistory.pop()\n      if (!move) {\n        break\n      }\n      this._makeMove(move)\n      copyComment(this.fen())\n    }\n    this._comments = currentComments\n  }\n\n  getComment() {\n    return this._comments[this.fen()]\n  }\n\n  setComment(comment: string) {\n    this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']')\n  }\n\n  deleteComment() {\n    const comment = this._comments[this.fen()]\n    delete this._comments[this.fen()]\n    return comment\n  }\n\n  getComments() {\n    this._pruneComments()\n    return Object.keys(this._comments).map((fen: string) => {\n      return { fen: fen, comment: this._comments[fen] }\n    })\n  }\n\n  deleteComments() {\n    this._pruneComments()\n    return Object.keys(this._comments).map((fen) => {\n      const comment = this._comments[fen]\n      delete this._comments[fen]\n      return { fen: fen, comment: comment }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}